// import { routes } from '../routes.js';
// import {
// 	actualizeIndexPage,
// 	getCookie,
// 	loadTemplate,
// 	closeModal,
// } from '../utils.js';

// const chatBubbles = {}; // Stocke les r√©f√©rences aux √©l√©ments de bulle par groupName
// const eventSources = {}; // Stocke les objets EventSource par groupName
// const messageOffsets = {}; // NOUVEAU: Stocke l'offset pour l'historique de chaque groupe


// // Helper pour cr√©er un √©l√©ment message HTML
// function createMessageElement(messageData, groupName) {
// 	const msg = document.createElement('div');
// 	msg.classList.add('chat-message');

// 	const usernameInput = document.getElementById(`usernameInput-${groupName}`);
// 	const currentUsername = usernameInput ? usernameInput.value : '';

// 	// D√©termine si c'est son propre message
// 	if (
// 		messageData.sender === currentUsername ||
// 		messageData.sender__username === currentUsername
// 	) {
// 		// Ajout de sender__username pour la compatibilit√© historique
// 		msg.classList.add('self');
// 	} else {
// 		msg.classList.add('other');
// 	}

// 	const senderSpan = document.createElement('span');
// 	senderSpan.classList.add('message-sender');
// 	// UTILISE 'messageData.sender__username' QUI VIENT DE L'HISTORIQUE OU 'messageData.sender' DES NOUVEAUX MESSAGES
// 	senderSpan.textContent = messageData.sender__username || messageData.sender;
// 	// ... (Reste du code pour le nom d'utilisateur cliquable) ...
// 	// Rendre le nom cliquable pour initier un chat priv√© (sauf avec soi-m√™me)
// 	const displayedSender = messageData.sender__username || messageData.sender;
// 	if (displayedSender && displayedSender !== currentUsername) {
// 		senderSpan.style.cursor = 'pointer';
// 		senderSpan.style.textDecoration = 'underline';
// 		senderSpan.onclick = () =>
// 			promptPrivateChat(displayedSender, messageData.sender_id || null);
// 	}
// 	msg.appendChild(senderSpan);

// 	const contentText = document.createTextNode(messageData.content);
// 	msg.appendChild(contentText);

// 	const timestampSpan = document.createElement('span');
// 	timestampSpan.classList.add('message-timestamp');
// 	timestampSpan.textContent = messageData.timestamp;
// 	msg.appendChild(timestampSpan);

// 	return msg;
// }

// // NOUVELLE FONCTION: Charger l'historique des messages
// async function loadMessageHistory(groupName, prepend = false) {
// 	const chatLog = document.getElementById(`chatLog-${groupName}`);
// 	if (!chatLog) {
// 		console.error(
// 			`chatLog-${groupName} introuvable pour charger l'historique.`
// 		);
// 		return;
// 	}

// 	const offset = messageOffsets[groupName] || 0;
// 	const limit = 20; // Nombre de messages √† charger √† chaque fois

// 	try {
// 		const response = await fetch(
// 			`/chat/history/${groupName}/?offset=${offset}&limit=${limit}`
// 		);
// 		const data = await response.json();

// 		if (response.ok && data.status === 'success') {
// 			if (data.messages.length > 0) {
// 				const fragment = document.createDocumentFragment();
// 				data.messages.forEach((msgData) => {
// 					const msgElement = createMessageElement(msgData, groupName);
// 					if (prepend) {
// 						fragment.appendChild(msgElement);
// 					} else {
// 						chatLog.appendChild(msgElement);
// 					}
// 				});

// 				if (prepend) {
// 					// Si on ajoute en haut, il faut ins√©rer au d√©but et ajuster le scroll
// 					const oldScrollHeight = chatLog.scrollHeight;
// 					chatLog.insertBefore(fragment, chatLog.firstChild);
// 					const newScrollHeight = chatLog.scrollHeight;
// 					// Maintenir la position de d√©filement relative
// 					chatLog.scrollTop = newScrollHeight - oldScrollHeight;
// 				} else {
// 					chatLog.appendChild(fragment);
// 					chatLog.scrollTop = chatLog.scrollHeight; // D√©filer vers le bas apr√®s chargement initial
// 				}
// 				messageOffsets[groupName] = offset + data.messages.length;
// 			} else if (!prepend) {
// 				// Si aucun message n'est charg√© au d√©but, c'est peut-√™tre la premi√®re fois
// 				console.log(
// 					`Pas d'historique pour ${groupName} ou fin de l'historique.`
// 				);
// 			}
// 		} else {
// 			console.error(
// 				'Erreur de chargement historique:',
// 				data.message || 'Unknown error'
// 			);
// 		}
// 	} catch (error) {
// 		console.error("Erreur r√©seau lors du chargement de l'historique:", error);
// 	}
// }
// // NOUVELLE variable pour les couleurs des boutons priv√©s
// const privateChatButtonColors = [
// 	'color1',
// 	'color2',
// 	'color3',
// 	'color4',
// 	'color5', // Ajoutez plus si vous pr√©voyez beaucoup de chats priv√©s
// ];
// const assignedPrivateChatColors = {}; // Pour suivre les couleurs d√©j√† attribu√©es

// // --- Nouvelle fonction pour cr√©er et g√©rer les boutons de chat ---
// function createChatToggleButton(groupName, isPrivate = false) {
// 	const buttonsContainer = document.getElementById('chatButtonsContainer');
// 	let button = document.getElementById(`chatToggleButton-${groupName}`);

// 	// Si le bouton existe d√©j√†, ne rien faire (il est d√©j√† l√†)
// 	if (button) {
// 		return button;
// 	}

// 	button = document.createElement('button');
// 	button.classList.add('chat-toggle-button');
// 	button.id = `chatToggleButton-${groupName}`;
// 	button.textContent = 'üí¨'; // Ic√¥ne par d√©faut

// 	if (isPrivate) {
// 		button.classList.add('private');
// 		// Trouver une couleur disponible ou en r√©utiliser une si le chat a d√©j√† √©t√© ouvert
// 		let colorClass = assignedPrivateChatColors[groupName];
// 		if (!colorClass) {
// 			// Simple assignation de couleur cyclique
// 			const colorIndex =
// 				Object.keys(assignedPrivateChatColors).length %
// 				privateChatButtonColors.length;
// 			colorClass = privateChatButtonColors[colorIndex];
// 			assignedPrivateChatColors[groupName] = colorClass;
// 		}
// 		button.classList.add(colorClass);

// 		// Mettre les initiales de l'interlocuteur dans l'ic√¥ne du bouton
// 		const participants = groupName.split('_').slice(1); // Ex: 'private_Alice_Bob' -> ['Alice', 'Bob']
// 		if (participants.length >= 2) {
// 			const otherUser = participants[0]; // Ou mettez une logique pour identifier l'autre utilisateur
// 			button.textContent = otherUser.charAt(0).toUpperCase(); // Premi√®re lettre de l'autre utilisateur
// 		} else {
// 			button.textContent = 'üîí'; // Ic√¥ne g√©n√©rique pour chat priv√© si noms non disponibles
// 		}
// 	} else {
// 		// Chat g√©n√©ral, pas de changement pour l'ic√¥ne par d√©faut
// 	}

// 	// G√©rer l'action de clic
// 	button.onclick = () => {
// 		toggleChat(groupName);
// 	};

// 	// Ajouter le bouton au conteneur (il sera ajout√© au d√©but gr√¢ce √† flex-direction: row-reverse)
// 	buttonsContainer.prepend(button); // Ajoute au d√©but du conteneur pour alignement de droite √† gauche

// 	return button;
// }
// // Fonction pour cr√©er une bulle de chat dynamique
// // --- Mise √† jour de la fonction createChatBubble ---
// async function createChatBubble(groupName, isPrivate = false) {
// 	// Si la bulle existe d√©j√†, l'afficher et ne pas la recr√©er
// 	if (chatBubbles[groupName]) {
// 		toggleChat(groupName, true); // Force l'affichage
// 		// S'assurer que le nom d'utilisateur est copi√© si c'est un nouveau chat priv√©
// 		const usernameInputGeneral = document.getElementById(
// 			'usernameInput-general'
// 		);
// 		const usernameInputCurrent = document.getElementById(
// 			`usernameInput-${groupName}`
// 		);
// 		if (
// 			usernameInputGeneral &&
// 			usernameInputCurrent &&
// 			!usernameInputCurrent.value
// 		) {
// 			usernameInputCurrent.value = usernameInputGeneral.value;
// 		}
// 		const chatLog = document.getElementById(`chatLog-${groupName}`);
// 		if (chatLog) {
// 			chatLog.scrollTop = chatLog.scrollHeight; // Scroll vers le bas
// 		}
// 		// Assurez-vous que le bouton est cr√©√©/visible si la bulle existe d√©j√†
// 		createChatToggleButton(groupName, isPrivate);
// 		return;
// 	}

// 	const chatContainer = document.createElement('div');
// 	chatContainer.classList.add('chat-bubble');
// 	chatContainer.id = `chatBubble-${groupName}`;

// 	if (isPrivate) {
// 		chatContainer.classList.add('private-chat');
// 		// Calculer la position 'right' pour que les bulles priv√©es s'empilent √† gauche
// 		// Chaque bulle priv√©e aura un 'right' d√©cal√© par rapport √† la pr√©c√©dente
// 		const existingBubbles = document.querySelectorAll(
// 			'.chat-bubble[style*="display: flex"]'
// 		);
// 		const offset = existingBubbles.length * 370; // 350px (largeur) + 20px (marge) ou plus
// 		chatContainer.style.right = `${20 + offset}px`; // 20px de base + offset
// 	}

// 	// G√©n√©rer le contenu HTML de la bulle en utilisant les IDs dynamiques
// 	chatContainer.innerHTML = `
//         <div class="chat-header" onclick="toggleChat('${groupName}')">
//             ${
// 							isPrivate
// 								? `Chat Priv√© (${groupName.split('_').slice(1).join(' - ')})`
// 								: 'Chat G√©n√©ral'
// 						}
//         </div>
//         <div class="chat-body" id="chatLog-${groupName}">
//         </div>
//         <div class="chat-input">
//             <input type="text" id="usernameInput-${groupName}" placeholder="Votre nom">
//             <input type="hidden" id="groupNameInput-${groupName}" value="${groupName}">
//         </div>
//         <div class="chat-input">
//             <input type="text" id="messageInput-${groupName}" placeholder="√âcris un message">
//             <button onclick="sendMessage('${groupName}')">Envoyer</button>
//         </div>
//     `;

// 	document.body.appendChild(chatContainer); // Ajouter la bulle au corps du document
// 	chatBubbles[groupName] = chatContainer; // Stocker la r√©f√©rence

// 	// Important: Cr√©ez le bouton correspondant √† la bulle ici
// 	createChatToggleButton(groupName, isPrivate);

// 	toggleChat(groupName, true); // Force l'affichage de la nouvelle bulle

// 	// Copier le nom d'utilisateur si d√©j√† renseign√© dans le chat g√©n√©ral
// 	const usernameInputGeneral = document.getElementById('usernameInput-general');
// 	const usernameInputCurrent = document.getElementById(
// 		`usernameInput-${groupName}`
// 	);
// 	if (usernameInputGeneral && usernameInputCurrent) {
// 		usernameInputCurrent.value = usernameInputGeneral.value;
// 	}

// 	await loadMessageHistory(groupName); // Charger l'historique des messages pour cette bulle

// 	initEventSource(groupName); // Initialiser la connexion SSE pour ce nouveau groupe

// 	// Ajouter l'√©couteur de scroll pour charger plus d'historique
// 	const chatLog = document.getElementById(`chatLog-${groupName}`);
// 	if (chatLog) {
// 		chatLog.addEventListener('scroll', function () {
// 			if (chatLog.scrollTop === 0) {
// 				loadMessageHistory(groupName, true);
// 			}
// 		});
// 	}
// }

// // Fonction pour afficher/masquer une bulle de chat
// // --- Mise √† jour de la fonction toggleChat ---
// function toggleChat(groupName, forceDisplay = false) {
// 	const bubble = document.getElementById(`chatBubble-${groupName}`);
// 	if (bubble) {
// 		if (forceDisplay) {
// 			bubble.style.display = 'flex';
// 		} else {
// 			bubble.style.display =
// 				bubble.style.display === 'none' || bubble.style.display === ''
// 					? 'flex'
// 					: 'none';
// 		}

// 		// Si affich√©, faire d√©filer vers le bas
// 		if (bubble.style.display === 'flex') {
// 			const chatLog = document.getElementById(`chatLog-${groupName}`);
// 			if (chatLog) {
// 				chatLog.scrollTop = chatLog.scrollHeight;
// 			}
// 			// Mettre √† jour la position des autres bulles si celle-ci s'affiche/se masque
// 			updateChatBubblePositions();
// 		} else {
// 			// Si la bulle est masqu√©e, ajuster la position des autres
// 			updateChatBubblePositions();
// 		}
// 	}
// }

// // Fonction pour envoyer un message
// async function sendMessage(groupName) {
// 	const usernameInput = document.getElementById(`usernameInput-${groupName}`);
// 	const messageInput = document.getElementById(`messageInput-${groupName}`);
// 	const groupNameInput = document.getElementById(`groupNameInput-${groupName}`);

// 	const username = usernameInput.value.trim();
// 	const content = messageInput.value.trim();
// 	const currentGroupName = groupNameInput.value;

// 	if (!username || !content) {
// 		alert('Veuillez entrer votre nom et un message.');
// 		return;
// 	}

// 	try {
// 		const response = await fetch('/chat/send/', {
// 			method: 'POST',
// 			headers: {
// 				'Content-Type': 'application/json',
// 				'X-CSRFToken': getCookie('csrftoken'),
// 			},
// 			body: JSON.stringify({
// 				username: username,
// 				content: content,
// 				group_name: currentGroupName,
// 			}),
// 		});

// 		const data = await response.json();
// 		if (response.ok) {
// 			if (data.status === 'success') {
// 				messageInput.value = '';
// 			} else {
// 				console.error("Erreur serveur lors de l'envoi:", data.message);
// 				alert("Erreur lors de l'envoi du message: " + data.message);
// 			}
// 		} else {
// 			console.error(
// 				"Erreur HTTP lors de l'envoi:",
// 				response.status,
// 				data.message || response.statusText
// 			);
// 			alert('Erreur HTTP: ' + (data.message || response.statusText));
// 		}
// 	} catch (error) {
// 		console.error('Erreur r√©seau ou JSON:', error);
// 		alert('Impossible de se connecter au serveur pour envoyer le message.');
// 	}
// }

// // Fonction pour initialiser l'EventSource (SSE) pour un groupe
// function initEventSource(groupName) {
// 	if (
// 		eventSources[groupName] &&
// 		eventSources[groupName].readyState === EventSource.OPEN
// 	) {
// 		return;
// 	}

// 	const chatLog = document.getElementById(`chatLog-${groupName}`);
// 	if (!chatLog) {
// 		console.error(`chatLog-${groupName} introuvable pour initEventSource.`);
// 		return;
// 	}

// 	const source = new EventSource(`/chat/stream/${groupName}/`);
// 	eventSources[groupName] = source;

// 	source.onmessage = function (e) {
// 		try {
// 			// Les messages SSE sont envoy√©s directement par le backend en JSON pour le stream
// 			const messageData = JSON.parse(e.data);
// 			const msgElement = createMessageElement(messageData, groupName);
// 			chatLog.appendChild(msgElement);
// 			chatLog.scrollTop = chatLog.scrollHeight; // D√©filer vers le bas
// 			// NOUVEAU: Ajouter le point rouge si la bulle n'est pas visible (futur)
// 			// addNotificationDot(groupName);
// 		} catch (error) {
// 			console.error(
// 				'Erreur de parsing JSON ou de traitement du message SSE:',
// 				error,
// 				e.data
// 			);
// 		}
// 	};

// 	source.onerror = function (err) {
// 		console.error('EventSource failed:', err);
// 		// G√©rer les erreurs de connexion SSE (reconnexion, affichage message utilisateur, etc.)
// 		// source.close(); // Peut-√™tre fermer et tenter de reconnecter apr√®s un d√©lai
// 	};
// }

// // Fonction pour obtenir le token CSRF (inchang√©e)
// function getCookie(name) {
// 	let cookieValue = null;
// 	if (document.cookie && document.cookie !== '') {
// 		const cookies = document.cookie.split(';');
// 		for (let i = 0; i < cookies.length; i++) {
// 			const cookie = cookies[i].trim();
// 			if (cookie.substring(0, name.length + 1) === name + '=') {
// 				cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
// 				break;
// 			}
// 		}
// 	}
// 	return cookieValue;
// }

// // Fonction pour demander la cr√©ation/r√©cup√©ration d'un groupe priv√© (inchang√©e)
// async function promptPrivateChat(targetUsername, targetUserId) {
// 	const currentUsernameInput =
// 		document.getElementById('usernameInput-general') ||
// 		document.querySelector('.chat-bubble input[id^="usernameInput-"]');
// 	if (!currentUsernameInput || !currentUsernameInput.value) {
// 		alert(
// 			"Veuillez d'abord entrer votre nom d'utilisateur dans le chat g√©n√©ral."
// 		);
// 		return;
// 	}
// 	const currentUsername = currentUsernameInput.value.trim();

// 	if (currentUsername === targetUsername) {
// 		alert('Vous ne pouvez pas d√©marrer un chat priv√© avec vous-m√™me.');
// 		return;
// 	}

// 	if (confirm(`Voulez-vous d√©marrer un chat priv√© avec ${targetUsername}?`)) {
// 		try {
// 			const response = await fetch('/chat/group/create/private', {
// 				method: 'POST',
// 				headers: {
// 					'Content-Type': 'application/x-www-form-urlencoded',
// 					'X-CSRFToken': getCookie('csrftoken'),
// 				},
// 				body: new URLSearchParams({
// 					current_username: currentUsername,
// 					target_username: targetUsername,
// 					// target_user_id: targetUserId // Si vous avez l'ID et que le backend l'utilise
// 				}).toString(),
// 			});

// 			const data = await response.json();
// 			if (response.ok) {
// 				if (data.status === 'success' && data.group_name) {
// 					createChatBubble(data.group_name, true); // Cr√©er la bulle du chat priv√©
// 				} else {
// 					console.error(
// 						'Erreur serveur lors de la cr√©ation du groupe priv√©:',
// 						data.message
// 					);
// 					alert('Erreur lors de la cr√©ation du groupe priv√©: ' + data.message);
// 				}
// 			} else {
// 				console.error(
// 					'Erreur HTTP lors de la cr√©ation du groupe priv√©:',
// 					response.status,
// 					data.error || response.statusText
// 				);
// 				alert('Erreur HTTP: ' + (data.error || response.statusText));
// 			}
// 		} catch (error) {
// 			console.error(
// 				'Erreur r√©seau lors de la cr√©ation du groupe priv√©:',
// 				error
// 			);
// 			alert(
// 				'Impossible de se connecter au serveur pour cr√©er le groupe priv√©.'
// 			);
// 		}
// 	}
// }
// // NOUVELLE FONCTION: Mettre √† jour la position des bulles de chat priv√©es
// function updateChatBubblePositions() {
// 	const activeBubbles = document.querySelectorAll(
// 		'.chat-bubble[style*="display: flex"]'
// 	);
// 	let currentOffset = 0;
// 	activeBubbles.forEach((bubble) => {
// 		// Ne d√©place que les bulles priv√©es
// 		if (bubble.classList.contains('private-chat')) {
// 			bubble.style.right = `${20 + currentOffset}px`;
// 			currentOffset += bubble.offsetWidth + 20; // Largeur de la bulle + gap
// 		}
// 	});
// }

// // Ex√©cute ce code lorsque le DOM est enti√®rement charg√©
// document.addEventListener('DOMContentLoaded', () => {
// 	// Cr√©er la bulle de chat g√©n√©rale au chargement de la page
// 	createChatBubble('general', false);

// 	// Attacher l'√©couteur d'√©v√©nements pour la touche 'Entr√©e'
// 	document.addEventListener('keydown', function (event) {
// 		if (event.key === 'Enter') {
// 			const activeElement = document.activeElement;
// 			if (activeElement && activeElement.id.startsWith('messageInput-')) {
// 				const groupName = activeElement.id.split('-')[1];
// 				sendMessage(groupName);
// 				event.preventDefault();
// 			}
// 		}
// 	});
// });

// export function chatController() {
	
// }

import { routes } from '../routes.js'; // `routes.js` ÌååÏùºÏóêÏÑú Í≤ΩÎ°ú Í¥ÄÎ†® ÏÑ§Ï†ïÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§. Ïù¥ ÌååÏùºÏóêÏÑúÎäî ÏßÅÏ†ë ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏßÄÎßå, ÌîÑÎ°úÏ†ùÌä∏Ïùò URL Í¥ÄÎ¶¨Ïóê ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.
import {
    actualizeIndexPage, // `../utils.js`ÏóêÏÑú ÌéòÏù¥ÏßÄ UIÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Ìï®ÏàòÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
    getCookie, // `../utils.js`ÏóêÏÑú Ïø†ÌÇ§ Í∞í(Ïòà: CSRF ÌÜ†ÌÅ∞)ÏùÑ ÏùΩÎäî Ìï®ÏàòÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
    loadTemplate, // `../utils.js`ÏóêÏÑú ÌÖúÌîåÎ¶øÏùÑ ÎèôÏ†ÅÏúºÎ°ú Î°úÎìúÌïòÎäî Ìï®ÏàòÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§. Ïù¥ ÌååÏùºÏóêÏÑúÎäî ÏßÅÏ†ë ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏäµÎãàÎã§.
    closeModal, // `../utils.js`ÏóêÏÑú Î™®Îã¨ Ï∞ΩÏùÑ Îã´Îäî Ìï®ÏàòÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§. Ïù¥ ÌååÏùºÏóêÏÑúÎäî ÏßÅÏ†ë ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏäµÎãàÎã§.
} from '../utils.js'; // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÍ∞Ä Ìè¨Ìï®Îêú ÌååÏùºÏùò ÏÉÅÎåÄ Í≤ΩÎ°úÏûÖÎãàÎã§.

const chatBubbles = {}; // Í∞Å Ï±ÑÌåÖ Í∑∏Î£π Ïù¥Î¶Ñ(groupName)Ïóê Ìï¥ÎãπÌïòÎäî Ï±ÑÌåÖ Î≤ÑÎ∏î(HTML ÏöîÏÜå)Ïùò Ï∞∏Ï°∞Î•º Ï†ÄÏû•ÌïòÎäî Í∞ùÏ≤¥ÏûÖÎãàÎã§. Ïù¥Î•º ÌÜµÌï¥ Ïù¥ÎØ∏ ÏÉùÏÑ±Îêú Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ Îπ†Î•¥Í≤å Ï∞æÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
const eventSources = {}; // Í∞Å Ï±ÑÌåÖ Í∑∏Î£π Ïù¥Î¶Ñ(groupName)Ïóê Ìï¥ÎãπÌïòÎäî EventSource(Server-Sent Events) Í∞ùÏ≤¥Ïùò Ï∞∏Ï°∞Î•º Ï†ÄÏû•ÌïòÎäî Í∞ùÏ≤¥ÏûÖÎãàÎã§. Ïã§ÏãúÍ∞Ñ Î©îÏãúÏßÄ Ïä§Ìä∏Î¶¨Î∞ç Ïó∞Í≤∞ÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
const messageOffsets = {}; // NOUVEAU: Í∞Å Ï±ÑÌåÖ Í∑∏Î£πÎ≥ÑÎ°ú Ïù¥Ï†ÑÏóê Î°úÎìúÎêú Î©îÏãúÏßÄ Ïàò(Ïò§ÌîÑÏÖã)Î•º Ï†ÄÏû•ÌïòÎäî Í∞ùÏ≤¥ÏûÖÎãàÎã§. Ïä§ÌÅ¨Î°§ÌïòÏó¨ Ïù¥Ï†Ñ Î©îÏãúÏßÄ Í∏∞Î°ùÏùÑ Îçî Î°úÎìúÌï† Îïå ÏÇ¨Ïö©Îê©ÎãàÎã§.

// Helper to create an HTML message element
// Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑ HTML Î©îÏãúÏßÄ ÏöîÏÜåÎ•º ÏÉùÏÑ±ÌïòÎäî ÎèÑÏö∞ÎØ∏ Ìï®ÏàòÏûÖÎãàÎã§.
function createMessageElement(messageData, groupName) {
    const msg = document.createElement('div'); // ÏÉàÎ°úÏö¥ `div` ÏöîÏÜåÎ•º ÏÉùÏÑ±ÌïòÏó¨ Î©îÏãúÏßÄ Ïª®ÌÖåÏù¥ÎÑàÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
    msg.classList.add('chat-message'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `chat-message` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.

    const usernameInput = document.getElementById(`usernameInput-${groupName}`); // ÌòÑÏû¨ Ï±ÑÌåÖ Í∑∏Î£πÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
    const currentUsername = usernameInput ? usernameInput.value : ''; // ÏûÖÎ†• ÌïÑÎìúÍ∞Ä Ï°¥Ïû¨ÌïòÎ©¥ Ìï¥Îãπ Í∞íÏùÑ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏúºÎ°ú Í∞ÄÏ†∏ÏòµÎãàÎã§.

    // D√©termine si c'est son propre message
    // Î©îÏãúÏßÄÍ∞Ä ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥ÎÇ∏ Í≤ÉÏù∏ÏßÄ(ÏûêÏã†) ÏïÑÎãàÎ©¥ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥ÎÇ∏ Í≤ÉÏù∏ÏßÄ ÌåêÎ≥ÑÌï©ÎãàÎã§.
    if (
        messageData.sender === currentUsername || // Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Ïùò `sender` ÌïÑÎìúÏôÄ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏù¥ ÏùºÏπòÌïòÎäî Í≤ΩÏö∞
        messageData.sender__username === currentUsername // ÎòêÎäî `sender__username` ÌïÑÎìú(Î©îÏãúÏßÄ Í∏∞Î°ùÍ≥ºÏùò Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ ÏÇ¨Ïö©Îê®)ÏôÄ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏù¥ ÏùºÏπòÌïòÎäî Í≤ΩÏö∞
    ) {
        msg.classList.add('self'); // Î©îÏãúÏßÄ Î∞úÏã†ÏûêÍ∞Ä Î≥∏Ïù∏Ïù∏ Í≤ΩÏö∞ `self` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌïòÏó¨ Îã§Î•¥Í≤å Ïä§ÌÉÄÏùºÎßÅÌï©ÎãàÎã§ (Î≥¥ÌÜµ Ïò§Î•∏Ï™ΩÏóê Ï†ïÎ†¨).
    } else {
        msg.classList.add('other'); // Î©îÏãúÏßÄ Î∞úÏã†ÏûêÍ∞Ä Îã§Î•∏ ÏÇ¨ÎûåÏù∏ Í≤ΩÏö∞ `other` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌïòÏó¨ Îã§Î•¥Í≤å Ïä§ÌÉÄÏùºÎßÅÌï©ÎãàÎã§ (Î≥¥ÌÜµ ÏôºÏ™ΩÏóê Ï†ïÎ†¨).
    }

    const senderSpan = document.createElement('span'); // Î∞úÏã†Ïûê Ïù¥Î¶ÑÏùÑ ÌëúÏãúÌï† `span` ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    senderSpan.classList.add('message-sender'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `message-sender` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    senderSpan.textContent = messageData.sender__username || messageData.sender; // `sender__username` (Î©îÏãúÏßÄ Í∏∞Î°ùÏö©) ÎòêÎäî `sender` (ÏÉà Î©îÏãúÏßÄÏö©)Î•º ÏÇ¨Ïö©ÌïòÏó¨ Î∞úÏã†Ïûê Ïù¥Î¶ÑÏùÑ ÌÖçÏä§Ìä∏Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.

    const displayedSender = messageData.sender__username || messageData.sender; // Ïã§Ï†úÎ°ú ÌëúÏãúÎê† Î∞úÏã†Ïûê Ïù¥Î¶ÑÏûÖÎãàÎã§.
    if (displayedSender && displayedSender !== currentUsername) { // ÌëúÏãúÎê† Î∞úÏã†Ïûê Ïù¥Î¶ÑÏù¥ Ï°¥Ïû¨ÌïòÍ≥† ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå
        senderSpan.style.cursor = 'pointer'; // `senderSpan`Ïóê ÎßàÏö∞Ïä§ Ïª§ÏÑúÎ•º Ìè¨Ïù∏ÌÑ∞Î°ú Î≥ÄÍ≤ΩÌïòÏó¨ ÌÅ¥Î¶≠ Í∞ÄÎä•Ìï®ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.
        senderSpan.style.textDecoration = 'underline'; // ÌÖçÏä§Ìä∏Ïóê Î∞ëÏ§ÑÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ ÌÅ¥Î¶≠ Í∞ÄÎä•Ìï®ÏùÑ ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÎÇòÌÉÄÎÉÖÎãàÎã§.
        senderSpan.onclick = () => // `senderSpan`ÏùÑ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå Ïã§ÌñâÎê† Ìï®ÏàòÎ•º Ï†ïÏùòÌï©ÎãàÎã§.
            promptPrivateChat(displayedSender, messageData.sender_id || null); // `promptPrivateChat` Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÏó¨ Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏôÄÏùò Í∞úÏù∏ Ï±ÑÌåÖ ÏãúÏûëÏùÑ Ï†úÏïàÌï©ÎãàÎã§. `sender_id`Í∞Ä ÏóÜÏúºÎ©¥ `null`ÏùÑ Ï†ÑÎã¨Ìï©ÎãàÎã§.
    }
    msg.appendChild(senderSpan); // Î∞úÏã†Ïûê Ïù¥Î¶Ñ `span`ÏùÑ Î©îÏãúÏßÄ `div`Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.

    const contentText = document.createTextNode(messageData.content); // Î©îÏãúÏßÄ ÎÇ¥Ïö© ÌÖçÏä§Ìä∏ ÎÖ∏ÎìúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    msg.appendChild(contentText); // Î©îÏãúÏßÄ ÎÇ¥Ïö© ÌÖçÏä§Ìä∏ ÎÖ∏ÎìúÎ•º Î©îÏãúÏßÄ `div`Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.

    const timestampSpan = document.createElement('span'); // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÎ•º ÌëúÏãúÌï† `span` ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    timestampSpan.classList.add('message-timestamp'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `message-timestamp` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    timestampSpan.textContent = messageData.timestamp; // Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Ïùò ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÎ•º ÌÖçÏä§Ìä∏Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
    msg.appendChild(timestampSpan); // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ `span`ÏùÑ Î©îÏãúÏßÄ `div`Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.

    return msg; // ÏôÑÏÑ±Îêú Î©îÏãúÏßÄ HTML ÏöîÏÜåÎ•º Î∞òÌôòÌï©ÎãàÎã§.
}

// Load message history
// ÌäπÏ†ï Í∑∏Î£πÏùò Î©îÏãúÏßÄ Í∏∞Î°ùÏùÑ ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú Î°úÎìúÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§. `prepend`Í∞Ä trueÏù¥Î©¥ Î©îÏãúÏßÄÎ•º Ï±ÑÌåÖ Î°úÍ∑∏Ïùò ÏÉÅÎã®Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
async function loadMessageHistory(groupName, prepend = false) {
    const chatLog = document.getElementById(`chatLog-${groupName}`); // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ Î°úÍ∑∏ Ïª®ÌÖåÏù¥ÎÑà ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
    if (!chatLog) { // `chatLog` ÏöîÏÜåÍ∞Ä ÏóÜÏúºÎ©¥ Ïò§Î•òÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌïòÍ≥† Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
        console.error(
            `chatLog-${groupName} introuvable pour charger l'historique.`
        );
        return;
    }

    const offset = messageOffsets[groupName] || 0; // `messageOffsets` Í∞ùÏ≤¥ÏóêÏÑú ÌòÑÏû¨ Í∑∏Î£πÏùò Î©îÏãúÏßÄ Ïò§ÌîÑÏÖãÏùÑ Í∞ÄÏ†∏Ïò§Í±∞ÎÇò, ÏóÜÏúºÎ©¥ 0ÏúºÎ°ú Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
    const limit = 20; // Ìïú Î≤àÏóê Î°úÎìúÌï† Î©îÏãúÏßÄÏùò ÏµúÎåÄ Í∞úÏàòÏûÖÎãàÎã§.

    try {
        const response = await fetch( // Î∞±ÏóîÎìúÏùò `/chat/history/` ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê Î©îÏãúÏßÄ Í∏∞Î°ùÏùÑ ÏöîÏ≤≠Ìï©ÎãàÎã§.
            `/chat/history/${groupName}/?offset=${offset}&limit=${limit}`
        );
        const data = await response.json(); // ÏùëÎãµÏùÑ JSON ÌòïÏãùÏúºÎ°ú ÌååÏã±Ìï©ÎãàÎã§.

        if (response.ok && data.status === 'success') { // HTTP ÏùëÎãµÏù¥ ÏÑ±Í≥µÏ†ÅÏù¥Í≥†(2xx) Î∞±ÏóîÎìú ÏùëÎãµÏùò `status` ÌïÑÎìúÍ∞Ä 'success'Ïù∏ Í≤ΩÏö∞
            if (data.messages.length > 0) { // ÏùëÎãµÏóê Î©îÏãúÏßÄÍ∞Ä ÌïòÎÇò Ïù¥ÏÉÅ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäî Í≤ΩÏö∞
                const fragment = document.createDocumentFragment(); // ÏÑ±Îä• Ìñ•ÏÉÅÏùÑ ÏúÑÌï¥ DocumentFragmentÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§. DOMÏóê ÏßÅÏ†ë Ï∂îÍ∞ÄÌïòÎäî ÎåÄÏã† Ïù¥ FragmentÏóê Î©îÏãúÏßÄÎ•º Ï∂îÍ∞ÄÌïú ÌõÑ Ìïú Î≤àÏóê DOMÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
                data.messages.forEach((msgData) => { // Í∞ÄÏ†∏Ïò® Í∞Å Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Ïóê ÎåÄÌï¥
                    const msgElement = createMessageElement(msgData, groupName); // Î©îÏãúÏßÄ HTML ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
                    if (prepend) { // `prepend` ÌîåÎûòÍ∑∏Í∞Ä `true`Ïù¥Î©¥
                        fragment.appendChild(msgElement); // Î©îÏãúÏßÄÎ•º FragmentÏùò ÎÅùÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
                    } else { // `prepend` ÌîåÎûòÍ∑∏Í∞Ä `false`Ïù¥Î©¥ (Ï¥àÍ∏∞ Î°úÎìú)
                        chatLog.appendChild(msgElement); // Î©îÏãúÏßÄÎ•º `chatLog`Ïùò ÎÅùÏóê ÏßÅÏ†ë Ï∂îÍ∞ÄÌï©ÎãàÎã§. (Ïù¥ Î∂ÄÎ∂ÑÏùÄ `fragment`Î•º ÏÇ¨Ïö©Ìïú `prepend` Î°úÏßÅÍ≥º ÏùºÍ¥ÄÏÑ±ÏùÑ ÏúÑÌï¥ Ï°∞Ï†ïÎê† Ïàò ÏûàÏäµÎãàÎã§.)
                    }
                });

                if (prepend) { // `prepend`Í∞Ä `true`Ïùº Îïå (Ïä§ÌÅ¨Î°§ÌïòÏó¨ Ïù¥Ï†Ñ Í∏∞Î°ù Î°úÎìú)
                    const oldScrollHeight = chatLog.scrollHeight; // Î©îÏãúÏßÄ Ï∂îÍ∞Ä Ï†Ñ `chatLog`Ïùò Ï†ÑÏ≤¥ Ïä§ÌÅ¨Î°§ ÎÜíÏù¥Î•º Ï†ÄÏû•Ìï©ÎãàÎã§.
                    chatLog.insertBefore(fragment, chatLog.firstChild); // DocumentFragmentÎ•º `chatLog`Ïùò Îß® ÏïûÏóê ÏÇΩÏûÖÌï©ÎãàÎã§.
                    const newScrollHeight = chatLog.scrollHeight; // Î©îÏãúÏßÄ Ï∂îÍ∞Ä ÌõÑ `chatLog`Ïùò ÏÉà Ï†ÑÏ≤¥ Ïä§ÌÅ¨Î°§ ÎÜíÏù¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
                    chatLog.scrollTop = newScrollHeight - oldScrollHeight; // Ïä§ÌÅ¨Î°§ ÏúÑÏπòÎ•º Ï°∞Ï†ïÌïòÏó¨ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º Î°úÎìúÌïú ÌõÑÏóêÎèÑ Ïù¥Ï†Ñ Î©îÏãúÏßÄÍ∞Ä ÌôîÎ©¥Ïóê Î≥¥Ïù¥Îäî ÏÉÅÎåÄÏ†Å ÏúÑÏπòÏóê Î®∏Î¨ºÎèÑÎ°ù Ìï©ÎãàÎã§.
                } else { // `prepend`Í∞Ä `false`Ïùº Îïå (Ï¥àÍ∏∞ Î©îÏãúÏßÄ Î°úÎìú)
                    chatLog.appendChild(fragment); // DocumentFragmentÎ•º `chatLog`Ïùò ÎÅùÏóê ÏÇΩÏûÖÌï©ÎãàÎã§.
                    chatLog.scrollTop = chatLog.scrollHeight; // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú Ïù¥ÎèôÌïòÏó¨ ÏµúÏã† Î©îÏãúÏßÄÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
                }
                messageOffsets[groupName] = offset + data.messages.length; // Îã§Ïùå `loadMessageHistory` Ìò∏Ï∂úÏùÑ ÏúÑÌï¥ `messageOffsets`Î•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
            } else if (!prepend) { // `prepend`Í∞Ä `false`Ïù∏Îç∞ Î©îÏãúÏßÄÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ (Ï¶â, Ï¥àÍ∏∞ Î°úÎìú Ïãú Í∏∞Î°ù ÏóÜÏùå)
                console.log(
                    `Pas d'historique pour ${groupName} ou fin de l'historique.`
                ); // ÏΩòÏÜîÏóê Î°úÍ∑∏Î•º Ï∂úÎ†•Ìï©ÎãàÎã§.
            }
        } else { // HTTP ÏùëÎãµÏù¥ Ïã§Ìå®ÌñàÍ±∞ÎÇò Î∞±ÏóîÎìú ÏùëÎãµÏùò `status`Í∞Ä 'success'Í∞Ä ÏïÑÎãå Í≤ΩÏö∞
            console.error(
                'Erreur de chargement historique:', // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                data.message || 'Unknown error' // `data.message`Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÌïòÍ≥†, ÏóÜÏúºÎ©¥ 'Unknown error'Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
            );
        }
    } catch (error) { // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞ (Ïòà: Ïó∞Í≤∞ Î¨∏Ï†ú)
        console.error("Erreur r√©seau lors du chargement de l'historique:", error); // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
    }
}

// Variable for private chat button colors
const privateChatButtonColors = [ // Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÌäºÏóê Ï†ÅÏö©Ìï† Ïàò ÏûàÎäî CSS ÌÅ¥ÎûòÏä§ Ïù¥Î¶Ñ Î∞∞Ïó¥ÏûÖÎãàÎã§.
    'color1',
    'color2',
    'color3',
    'color4',
    'color5', // Îçî ÎßéÏùÄ ÏÉâÏÉÅÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ Í∞úÏù∏ Ï±ÑÌåÖÏùò ÏãúÍ∞ÅÏ†Å Îã§ÏñëÏÑ±ÏùÑ ÎÜíÏùº Ïàò ÏûàÏäµÎãàÎã§.
];
const assignedPrivateChatColors = {}; // Í∞Å Í∞úÏù∏ Ï±ÑÌåÖ Í∑∏Î£π Ïù¥Î¶ÑÏóê Ïù¥ÎØ∏ Ìï†ÎãπÎêú ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Î•º Ï∂îÏ†ÅÌïòÎäî Í∞ùÏ≤¥ÏûÖÎãàÎã§.

// Function to hide all chat bubbles and show their respective toggle buttons
// ÌòÑÏû¨ Ïó¥Î†§ ÏûàÎäî Î™®Îì† Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ Ïà®Í∏∞Í≥† Ìï¥Îãπ Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ ÌëúÏãúÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
function hideAllChatBubbles() {
    for (const groupName in chatBubbles) { // `chatBubbles` Í∞ùÏ≤¥Ïùò Î™®Îì† `groupName`ÏùÑ ÏàúÌöåÌï©ÎãàÎã§.
        const bubble = chatBubbles[groupName]; // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ Î≤ÑÎ∏î ÏöîÏÜåÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        bubble.style.display = 'none'; // Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò CSS `display` ÏÜçÏÑ±ÏùÑ 'none'ÏúºÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Ïà®ÍπÅÎãàÎã§.
        const button = document.getElementById(`chatToggleButton-${groupName}`); // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäº ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
        if (button) { // Î≤ÑÌäºÏù¥ Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞
            button.style.display = 'flex'; // Î≤ÑÌäºÏùò `display` ÏÜçÏÑ±ÏùÑ 'flex'Î°ú ÏÑ§Ï†ïÌïòÏó¨ ÌëúÏãúÌï©ÎãàÎã§.
        }
    }
}

// Function to create and manage chat toggle buttons
// Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§. Ïù¥ Î≤ÑÌäºÏùÄ ÏµúÏÜåÌôîÎêú Ï±ÑÌåÖ Ï∞ΩÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.
function createChatToggleButton(groupName, isPrivate = false) {
    const buttonsContainer = document.getElementById('chatButtonsContainer'); // Ï±ÑÌåÖ Î≤ÑÌäºÎì§Ïù¥ Ï∂îÍ∞ÄÎê† Ïª®ÌÖåÏù¥ÎÑà ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
    let button = document.getElementById(`chatToggleButton-${groupName}`); // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Î≤ÑÌäºÏù¥ Ïù¥ÎØ∏ DOMÏóê Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.

    if (button) { // Î≤ÑÌäºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎ©¥
        return button; // Í∏∞Ï°¥ Î≤ÑÌäºÏùÑ Î∞òÌôòÌïòÍ≥† ÏÉàÎ°≠Í≤å ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏäµÎãàÎã§.
    }

    button = document.createElement('button'); // ÏÉàÎ°úÏö¥ `button` ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    button.classList.add('chat-toggle-button'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌïú Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    button.id = `chatToggleButton-${groupName}`; // Î≤ÑÌäºÏóê Í≥†Ïú†Ìïú IDÎ•º Ìï†ÎãπÌï©ÎãàÎã§.
    button.textContent = 'üí¨'; // Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò(ÎßêÌíçÏÑ† Ïù¥Î™®ÏßÄ)ÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§.

    if (isPrivate) { // Ïù¥ Î≤ÑÌäºÏù¥ Í∞úÏù∏ Ï±ÑÌåÖÏö©Ïù∏ Í≤ΩÏö∞
        button.classList.add('private'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `private` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
        let colorClass = assignedPrivateChatColors[groupName]; // `assignedPrivateChatColors`ÏóêÏÑú Ïù¥ Í∑∏Î£πÏóê Ïù¥ÎØ∏ Ìï†ÎãπÎêú ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Î•º ÌôïÏù∏Ìï©ÎãàÎã§.
        if (!colorClass) { // Ìï†ÎãπÎêú ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
            const colorIndex = // `privateChatButtonColors` Î∞∞Ïó¥ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÏÉâÏÉÅ Ïù∏Îç±Ïä§Î•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§.
                Object.keys(assignedPrivateChatColors).length % // Ïù¥ÎØ∏ Ìï†ÎãπÎêú Í∞úÏù∏ Ï±ÑÌåÖ Ïàò(ÌÇ§Ïùò Í∞úÏàò)Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
                privateChatButtonColors.length; // ÏÉâÏÉÅ Î∞∞Ïó¥Ïùò Í∏∏Ïù¥Î°ú ÎÇòÎàà ÎÇòÎ®∏ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏàúÌôòÏ†ÅÏúºÎ°ú ÏÉâÏÉÅÏùÑ Ìï†ÎãπÌï©ÎãàÎã§.
            colorClass = privateChatButtonColors[colorIndex]; // Í≥ÑÏÇ∞Îêú Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
            assignedPrivateChatColors[groupName] = colorClass; // Ïù¥ Í∑∏Î£πÏóê Ìï¥Îãπ ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Î•º Ìï†ÎãπÌïòÍ≥† Ï†ÄÏû•Ìï©ÎãàÎã§.
        }
        button.classList.add(colorClass); // Î≤ÑÌäºÏóê Ìï†ÎãπÎêú ÏÉâÏÉÅ ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.

        const participants = groupName.split('_').slice(1); // `groupName` (Ïòà: 'private_Alice_Bob')ÏùÑ '_'Î°ú Î∂ÑÎ¶¨ÌïòÍ≥† Ï≤´ Î∂ÄÎ∂ÑÏùÑ Ï†úÏô∏ÌïòÏó¨ Ï∞∏Í∞ÄÏûê Ïù¥Î¶ÑÎì§ÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§.
        if (participants.length >= 2) { // Ï∞∏Í∞ÄÏûêÍ∞Ä Îëê Î™Ö Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞
            const otherUser = participants[0]; // Ï≤´ Î≤àÏß∏ Ï∞∏Í∞ÄÏûêÎ•º 'Îã§Î•∏ ÏÇ¨Ïö©Ïûê'Î°ú Í∞ÄÏ†ïÌï©ÎãàÎã§ (Ïã§Ï†ú Î°úÏßÅÏóê Îî∞Îùº Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå).
            button.textContent = otherUser.charAt(0).toUpperCase(); // Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏùò Ïù¥Î¶Ñ Ï≤´ Í∏ÄÏûêÎ•º ÎåÄÎ¨∏ÏûêÎ°ú Î≤ÑÌäº ÏïÑÏù¥ÏΩòÏúºÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
        } else {
            button.textContent = 'üîí'; // Ï∞∏Í∞ÄÏûê Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏúºÎ©¥ Ïû†Í∏à ÏïÑÏù¥ÏΩòÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.
        }
    } else {
        // ÏùºÎ∞ò Ï±ÑÌåÖ Î≤ÑÌäºÏù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò(üí¨)ÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
    }

    button.onclick = () => { // Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎê† Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Î•º Ï†ïÏùòÌï©ÎãàÎã§.
        toggleChat(groupName, true); // `toggleChat` Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÏó¨ Ìï¥Îãπ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ Í∞ïÏ†úÎ°ú ÌëúÏãú(ÌôïÏû•)Ìï©ÎãàÎã§.
    };

    buttonsContainer.prepend(button); // `buttonsContainer`Ïùò Îß® ÏïûÏóê Î≤ÑÌäºÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§. Ïù¥Î†áÍ≤å ÌïòÎ©¥ CSSÏùò `flex-direction: row-reverse`Ïóê Îî∞Îùº Î≤ÑÌäºÏù¥ Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ï†ïÎ†¨Îê©ÎãàÎã§.

    return button; // ÏÉùÏÑ±Îêú Î≤ÑÌäº ÏöîÏÜåÎ•º Î∞òÌôòÌï©ÎãàÎã§.
}

// Function to create a dynamic chat bubble
// ÎèôÏ†ÅÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏î(ÌôïÏû•Îêú Ï±ÑÌåÖ Ï∞Ω)ÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
async function createChatBubble(groupName, isPrivate = false) {
    if (chatBubbles[groupName]) { // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ Î≤ÑÎ∏îÏù¥ Ïù¥ÎØ∏ `chatBubbles` Í∞ùÏ≤¥Ïóê Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞
        toggleChat(groupName, true); // Í∏∞Ï°¥ Î≤ÑÎ∏îÏùò ÏÉÅÌÉúÎ•º `toggleChat` Ìï®ÏàòÎ•º ÌÜµÌï¥ ÏóÖÎç∞Ïù¥Ìä∏(ÌëúÏãú)Ìï©ÎãàÎã§.
        const usernameInputGeneral = document.getElementById('usernameInput-general'); // ÏùºÎ∞ò Ï±ÑÌåÖÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
        const usernameInputCurrent = document.getElementById(`usernameInput-${groupName}`); // ÌòÑÏû¨ Í∑∏Î£πÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
        if (usernameInputGeneral && usernameInputCurrent && !usernameInputCurrent.value) { // ÏùºÎ∞ò Ï±ÑÌåÖ ÏûÖÎ†• ÌïÑÎìúÏóê Í∞íÏù¥ ÏûàÍ≥†, ÌòÑÏû¨ Í∑∏Î£π ÏûÖÎ†• ÌïÑÎìúÍ∞Ä ÎπÑÏñ¥ ÏûàÏúºÎ©¥
            usernameInputCurrent.value = usernameInputGeneral.value; // ÏùºÎ∞ò Ï±ÑÌåÖÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ ÌòÑÏû¨ Í∑∏Î£π ÏûÖÎ†• ÌïÑÎìúÎ°ú Î≥µÏÇ¨Ìï©ÎãàÎã§.
        }
        const chatLog = document.getElementById(`chatLog-${groupName}`); // ÌòÑÏû¨ Í∑∏Î£πÏùò Ï±ÑÌåÖ Î°úÍ∑∏ Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏäµÎãàÎã§.
        if (chatLog) { // Ï±ÑÌåÖ Î°úÍ∑∏Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥
            chatLog.scrollTop = chatLog.scrollHeight; // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú Ïù¥ÎèôÌïòÏó¨ ÏµúÏã† Î©îÏãúÏßÄÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
        }
        createChatToggleButton(groupName, isPrivate); // Î≤ÑÎ∏îÏù¥ Ï°¥Ïû¨Ìï¥ÎèÑ Ìï¥Îãπ ÌÜ†Í∏Ä Î≤ÑÌäºÏù¥ ÏÉùÏÑ±/ÌëúÏãúÎêòÎèÑÎ°ù Ìï©ÎãàÎã§.
        return; // Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }

    const chatContainer = document.createElement('div'); // ÏÉàÎ°úÏö¥ `div` ÏöîÏÜåÎ•º ÏÉùÏÑ±ÌïòÏó¨ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò Ïª®ÌÖåÏù¥ÎÑàÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
    chatContainer.classList.add('chat-bubble'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `chat-bubble` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    chatContainer.id = `chatBubble-${groupName}`; // Î≤ÑÎ∏îÏóê Í≥†Ïú†Ìïú IDÎ•º Ìï†ÎãπÌï©ÎãàÎã§.

    if (isPrivate) { // Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏù∏ Í≤ΩÏö∞
        chatContainer.classList.add('private-chat'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `private-chat` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
        const existingBubbles = document.querySelectorAll( // ÌòÑÏû¨ `display: flex`Î°ú ÌëúÏãúÎêú(Ïó¥Î†§ ÏûàÎäî) Î™®Îì† Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ ÏÑ†ÌÉùÌï©ÎãàÎã§.
            '.chat-bubble[style*="display: flex"]'
        );
        const offset = existingBubbles.length * 370; // Ïù¥ÎØ∏ Ïó¥Î†§ ÏûàÎäî Î≤ÑÎ∏îÏùò Í∞úÏàòÏóê Îî∞Îùº Ïò§ÌîÑÏÖã(Í∞ÑÍ≤©)ÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§. (350pxÎäî Î≤ÑÎ∏î ÎÑàÎπÑ, 20pxÎäî ÎßàÏßÑ)
        chatContainer.style.right = `${20 + offset}px`; // `right` CSS ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌïòÏó¨ Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏù¥ Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú ÏåìÏù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
    } else { // ÏùºÎ∞ò Ï±ÑÌåÖ Î≤ÑÎ∏îÏù∏ Í≤ΩÏö∞
        chatContainer.classList.add('general-chat'); // CSS Ïä§ÌÉÄÏùºÎßÅÏùÑ ÏúÑÌï¥ `general-chat` ÌÅ¥ÎûòÏä§Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    }

    // Generate the HTML content of the bubble with dynamic IDs
    // ÎèôÏ†Å IDÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò ÎÇ¥Î∂Ä HTML ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    chatContainer.innerHTML = `
        <div class="chat-header ${isPrivate ? 'private' : 'general'}"> // Ìó§Îçî ÏòÅÏó≠. Í∞úÏù∏/ÏùºÎ∞ò Ï±ÑÌåÖÏóê Îî∞Îùº ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä.
            <h4>${ // Ìó§Îçî Ï†úÎ™©. Í∞úÏù∏ Ï±ÑÌåÖÏù¥Î©¥ 'Chat Priv√© (Ï∞∏Í∞ÄÏûê)', ÏùºÎ∞ò Ï±ÑÌåÖÏù¥Î©¥ 'Chat G√©n√©ral'ÏùÑ ÌëúÏãúÌï©ÎãàÎã§.
                            isPrivate
                                ? `Chat Priv√© (${groupName.split('_').slice(1).join(' - ')})`
                                : 'Chat G√©n√©ral'
                        }</h4>
            <button class="close-btn" onclick="toggleChat('${groupName}')">&times;</button> // Îã´Í∏∞ Î≤ÑÌäº. ÌÅ¥Î¶≠ Ïãú `toggleChat`ÏùÑ Ìò∏Ï∂úÌïòÏó¨ Î≤ÑÎ∏îÏùÑ ÏµúÏÜåÌôîÌï©ÎãàÎã§.
        </div>
        <div class="chat-body" id="chatLog-${groupName}"> // Î©îÏãúÏßÄ ÎÇ¥Ïö©Ïù¥ ÌëúÏãúÎê† ÏòÅÏó≠.
        </div>
        <div class="chat-input"> // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìú ÏòÅÏó≠.
            <input type="text" id="usernameInput-${groupName}" placeholder="Votre nom">
            <input type="hidden" id="groupNameInput-${groupName}" value="${groupName}"> // Í∑∏Î£π Ïù¥Î¶ÑÏùÑ Ïà®Í≤®ÏßÑ ÌïÑÎìúÎ°ú Ï†ÄÏû•ÌïòÏó¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïãú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
        </div>
        <div class="chat-input"> // Î©îÏãúÏßÄ ÏûÖÎ†• ÌïÑÎìú Î∞è Ï†ÑÏÜ° Î≤ÑÌäº ÏòÅÏó≠.
            <input type="text" id="messageInput-${groupName}" placeholder="√âcris un message">
            <button onclick="sendMessage('${groupName}')">Envoyer</button> // 'Envoyer'(Î≥¥ÎÇ¥Í∏∞) Î≤ÑÌäº. ÌÅ¥Î¶≠ Ïãú `sendMessage`Î•º Ìò∏Ï∂úÌïòÏó¨ Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°Ìï©ÎãàÎã§.
        </div>
    `;

    document.getElementById('chat-container').appendChild(chatContainer); // ÏÉàÎ°ú ÏÉùÏÑ±Îêú Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ `index.html`Ïùò `#chat-container` ÏöîÏÜåÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    chatBubbles[groupName] = chatContainer; // ÎÇòÏ§ëÏóê Ï∞∏Ï°∞Ìï† Ïàò ÏûàÎèÑÎ°ù `chatBubbles` Í∞ùÏ≤¥Ïóê Î≤ÑÎ∏î ÏöîÏÜåÎ•º Ï†ÄÏû•Ìï©ÎãàÎã§.

    // Create the toggle button for this bubble (it will be initially visible if its bubble is hidden)
    // Ïù¥ Î≤ÑÎ∏îÏóê Ìï¥ÎãπÌïòÎäî ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§. (Î≤ÑÎ∏îÏù¥ Ï≤òÏùåÏóê Ïà®Í≤®Ï†∏ ÏûàÏúºÎ©¥ Î≤ÑÌäºÏùÄ ÌëúÏãúÎê©ÎãàÎã§.)
    createChatToggleButton(groupName, isPrivate);

    // Initial state: created but hidden. Will be shown via toggleChat later.
    // Ï¥àÍ∏∞ ÏÉÅÌÉú: Î≤ÑÎ∏îÏùÄ ÏÉùÏÑ±ÎêòÏóàÏßÄÎßå Ïà®Í≤®Ï†∏ ÏûàÏäµÎãàÎã§. ÎÇòÏ§ëÏóê `toggleChat` Ìï®ÏàòÎ•º ÌÜµÌï¥ ÌëúÏãúÎê©ÎãàÎã§.
    chatContainer.style.display = 'none';

    // Copy username from general chat if available
    // ÏùºÎ∞ò Ï±ÑÌåÖÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏù¥ Ïù¥ÎØ∏ ÏûÖÎ†•ÎêòÏñ¥ ÏûàÏúºÎ©¥ ÌòÑÏû¨ Í∑∏Î£πÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ°ú Î≥µÏÇ¨Ìï©ÎãàÎã§.
    const usernameInputGeneral = document.getElementById('usernameInput-general');
    const usernameInputCurrent = document.getElementById(
        `usernameInput-${groupName}`
    );
    if (usernameInputGeneral && usernameInputCurrent && !usernameInputCurrent.value) {
        usernameInputCurrent.value = usernameInputGeneral.value;
    }

    // Load history and init SSE if the bubble is *initially* set to display (e.g. for general chat only)
    // Or delay this until the first time it is maximized. For now, keep it for functionality.
    // Î©îÏãúÏßÄ Í∏∞Î°ùÏùÑ Î°úÎìúÌïòÍ≥† SSE Ïó∞Í≤∞ÏùÑ Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§. (Í∏∞Îä•ÏùÑ ÏúÑÌï¥ ÏùºÎã® ÏÉùÏÑ± ÏãúÏ†êÏóê Ìò∏Ï∂úÌïòÏßÄÎßå, ÎÇòÏ§ëÏóê Î≤ÑÎ∏îÏù¥ Ï≤òÏùåÏúºÎ°ú ÌôïÏû•Îê† ÎïåÍπåÏßÄ ÏßÄÏó∞ÏãúÌÇ¨ ÏàòÎèÑ ÏûàÏäµÎãàÎã§.)
    await loadMessageHistory(groupName);
    initEventSource(groupName);

    const chatLog = document.getElementById(`chatLog-${groupName}`); // Ìï¥Îãπ Í∑∏Î£πÏùò Ï±ÑÌåÖ Î°úÍ∑∏ ÏöîÏÜåÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
    if (chatLog) { // Ï±ÑÌåÖ Î°úÍ∑∏ ÏöîÏÜåÍ∞Ä Ï°¥Ïû¨ÌïòÎ©¥
        chatLog.addEventListener('scroll', function () { // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏Î•º ÏàòÏã†Ìï©ÎãàÎã§.
            if (chatLog.scrollTop === 0) { // Ïä§ÌÅ¨Î°§Ïù¥ Îß® ÏúÑÎ°ú Ïù¥ÎèôÌïú Í≤ΩÏö∞ (Ïù¥Ï†Ñ Î©îÏãúÏßÄ Î°úÎìú ÏãúÏ†ê)
                loadMessageHistory(groupName, true); // Ïù¥Ï†Ñ Î©îÏãúÏßÄ Í∏∞Î°ùÏùÑ `prepend`(ÏÉÅÎã®Ïóê Ï∂îÍ∞Ä)ÌïòÏó¨ Î°úÎìúÌï©ÎãàÎã§.
            }
        });
    }
}

// Function to show/hide a chat bubble
// Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ ÌëúÏãúÌïòÍ±∞ÎÇò Ïà®Í∏∞Îäî (ÌôïÏû•/ÏµúÏÜåÌôî) Ìï®ÏàòÏûÖÎãàÎã§.
function toggleChat(groupName, forceDisplay = false) {
    const bubble = document.getElementById(`chatBubble-${groupName}`); // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ Î≤ÑÎ∏î ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
    if (!bubble) return; // Î≤ÑÎ∏îÏù¥ ÏóÜÏúºÎ©¥ Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.

    const button = document.getElementById(`chatToggleButton-${groupName}`); // Ìï¥Îãπ `groupName`Ïóê ÎåÄÌïú Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Ï∞æÏäµÎãàÎã§.

    // Logic: if forceDisplay (e.g. from button click) OR currently hidden -> show it
    // ÎÖºÎ¶¨: `forceDisplay`Í∞Ä trueÏù¥Í±∞ÎÇò (Î≤ÑÌäº ÌÅ¥Î¶≠ Îì±) ÌòÑÏû¨ Î≤ÑÎ∏îÏù¥ Ïà®Í≤®Ï†∏ ÏûàÏúºÎ©¥ -> ÌëúÏãúÌï©ÎãàÎã§.
    if (forceDisplay || bubble.style.display === 'none' || bubble.style.display === '') {
        // Hide all other open bubbles first
        // Îã§Î•∏ Î™®Îì† Ïó¥Î†§ ÏûàÎäî Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ Î®ºÏ†Ä Ïà®ÍπÅÎãàÎã§.
        hideAllChatBubbles();

        bubble.style.display = 'flex'; // ÌòÑÏû¨ Î≤ÑÎ∏îÏùò `display` ÏÜçÏÑ±ÏùÑ 'flex'Î°ú ÏÑ§Ï†ïÌïòÏó¨ ÌëúÏãú(ÌôïÏû•)Ìï©ÎãàÎã§.
        if (button) { // Ìï¥Îãπ ÌÜ†Í∏Ä Î≤ÑÌäºÏù¥ Ï°¥Ïû¨ÌïòÎ©¥
            button.style.display = 'none'; // Ìï¥Îãπ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Ïà®ÍπÅÎãàÎã§.
        }

        const chatLog = document.getElementById(`chatLog-${groupName}`); // Ìï¥Îãπ Í∑∏Î£πÏùò Ï±ÑÌåÖ Î°úÍ∑∏ Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏäµÎãàÎã§.
        if (chatLog) { // Ï±ÑÌåÖ Î°úÍ∑∏Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥
            chatLog.scrollTop = chatLog.scrollHeight; // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú Ïù¥ÎèôÌïòÏó¨ ÏµúÏã† Î©îÏãúÏßÄÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
        }
        updateChatBubblePositions(); // Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò ÏúÑÏπòÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§ (Í≤πÏπòÏßÄ ÏïäÍ≤å Ï†ïÎ†¨).
    } else { // ÌòÑÏû¨ Î≤ÑÎ∏îÏù¥ ÌëúÏãúÎêòÏñ¥ ÏûàÎäî Í≤ΩÏö∞ (Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ Îì±ÏúºÎ°ú ÏµúÏÜåÌôîÌïòÎ†§Îäî Í≤ΩÏö∞)
        bubble.style.display = 'none'; // Î≤ÑÎ∏îÏùò `display` ÏÜçÏÑ±ÏùÑ 'none'ÏúºÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Ïà®ÍπÅÎãàÎã§(ÏµúÏÜåÌôî).
        if (button) { // Ìï¥Îãπ ÌÜ†Í∏Ä Î≤ÑÌäºÏù¥ Ï°¥Ïû¨ÌïòÎ©¥
            button.style.display = 'flex'; // Ìï¥Îãπ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Îã§Ïãú ÌëúÏãúÌï©ÎãàÎã§.
        }
        updateChatBubblePositions(); // Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò ÏúÑÏπòÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
    }
}

// Function to send a message
// Î©îÏãúÏßÄÎ•º ÌäπÏ†ï Í∑∏Î£πÏúºÎ°ú Ï†ÑÏÜ°ÌïòÎäî ÎπÑÎèôÍ∏∞ Ìï®ÏàòÏûÖÎãàÎã§.
async function sendMessage(groupName) {
    const usernameInput = document.getElementById(`usernameInput-${groupName}`); // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
    const messageInput = document.getElementById(`messageInput-${groupName}`); // Î©îÏãúÏßÄ ÎÇ¥Ïö© ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
    const groupNameInput = document.getElementById(`groupNameInput-${groupName}`); // Ïà®Í≤®ÏßÑ Í∑∏Î£π Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.

    const username = usernameInput.value.trim(); // ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùò ÏïûÎí§ Í≥µÎ∞±ÏùÑ Ï†úÍ±∞Ìï©ÎãàÎã§.
    const content = messageInput.value.trim(); // Î©îÏãúÏßÄ ÎÇ¥Ïö©Ïùò ÏïûÎí§ Í≥µÎ∞±ÏùÑ Ï†úÍ±∞Ìï©ÎãàÎã§.
    const currentGroupName = groupNameInput.value; // ÌòÑÏû¨ Í∑∏Î£π Ïù¥Î¶ÑÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§.

    if (!username || !content) { // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÎòêÎäî Î©îÏãúÏßÄ ÎÇ¥Ïö©Ïù¥ ÎπÑÏñ¥ ÏûàÏúºÎ©¥
        alert('Veuillez entrer votre nom et un message.'); // Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌëúÏãúÌï©ÎãàÎã§.
        return; // Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }

    try {
        const response = await fetch('/chat/send/', { // Î∞±ÏóîÎìúÏùò `/chat/send/` ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê POST ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉÖÎãàÎã§.
            method: 'POST', // HTTP POST Î©îÏÑúÎìú
            headers: { // ÏöîÏ≤≠ Ìó§Îçî
                'Content-Type': 'application/json', // ÏöîÏ≤≠ Î≥∏Î¨∏Ïùò ÏΩòÌÖêÏ∏† Ïú†ÌòïÏù¥ JSONÏûÑÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.
                'X-CSRFToken': getCookie('csrftoken'), // CSRF(Cross-Site Request Forgery) Î≥¥Ìò∏Î•º ÏúÑÌïú CSRF ÌÜ†ÌÅ∞ÏùÑ Ìó§ÎçîÏóê Ìè¨Ìï®Ìï©ÎãàÎã§.
            },
            body: JSON.stringify({ // ÏöîÏ≤≠ Î≥∏Î¨∏ÏùÑ JSON Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÌïòÏó¨ Ìè¨Ìï®Ìï©ÎãàÎã§.
                username: username, // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ
                content: content, // Î©îÏãúÏßÄ ÎÇ¥Ïö©
                group_name: currentGroupName, // ÌòÑÏû¨ Í∑∏Î£π Ïù¥Î¶Ñ
            }),
        });

        const data = await response.json(); // ÏùëÎãµÏùÑ JSON ÌòïÏãùÏúºÎ°ú ÌååÏã±Ìï©ÎãàÎã§.
        if (response.ok) { // HTTP ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 2xx(ÏÑ±Í≥µ)Ïù∏ Í≤ΩÏö∞
            if (data.status === 'success') { // Î∞±ÏóîÎìú ÏùëÎãµÏùò `status` ÌïÑÎìúÍ∞Ä 'success'Ïù∏ Í≤ΩÏö∞
                messageInput.value = ''; // Î©îÏãúÏßÄ ÏûÖÎ†• ÌïÑÎìúÎ•º ÎπÑÏõÅÎãàÎã§.
            } else { // Î∞±ÏóîÎìú ÏùëÎãµÏùò `status`Í∞Ä 'success'Í∞Ä ÏïÑÎãå Í≤ΩÏö∞
                console.error("Erreur serveur lors de l'envoi:", data.message); // ÏÑúÎ≤Ñ Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                alert("Erreur lors de l'envoi du message: " + data.message); // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
            }
        } else { // HTTP ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 2xxÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ (Ïòà: 4xx, 5xx)
            console.error( // HTTP Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                "Erreur HTTP lors de l'envoi:",
                response.status, // HTTP ÏÉÅÌÉú ÏΩîÎìú
                data.message || response.statusText // Î∞±ÏóîÎìú Î©îÏãúÏßÄ ÎòêÎäî Í∏∞Î≥∏ ÏÉÅÌÉú ÌÖçÏä§Ìä∏
            );
            alert('Erreur HTTP: ' + (data.message || response.statusText)); // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
        }
    } catch (error) { // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò (Ïòà: ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®) ÎòêÎäî JSON ÌååÏã± Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞
        console.error('Erreur r√©seau ou JSON:', error); // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
        alert('Impossible de se connecter au serveur pour envoyer le message.'); // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
    }
}

// Function to initialize EventSource (SSE) for a group
// ÌäπÏ†ï Ï±ÑÌåÖ Í∑∏Î£πÏóê ÎåÄÌïú EventSource(Server-Sent Events) Ïó∞Í≤∞ÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
function initEventSource(groupName) {
    if ( // EventSourceÍ∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÍ≥† Ïó∞Í≤∞Ïù¥ Ïó¥Î†§ ÏûàÎäî Í≤ΩÏö∞
        eventSources[groupName] &&
        eventSources[groupName].readyState === EventSource.OPEN
    ) {
        return; // Îã§Ïãú Ï¥àÍ∏∞ÌôîÌïòÏßÄ ÏïäÍ≥† Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }

    const chatLog = document.getElementById(`chatLog-${groupName}`); // Ìï¥Îãπ Í∑∏Î£πÏùò Ï±ÑÌåÖ Î°úÍ∑∏ Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏäµÎãàÎã§.
    if (!chatLog) { // Ï±ÑÌåÖ Î°úÍ∑∏ Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä ÏóÜÏúºÎ©¥
        console.error(`chatLog-${groupName} introuvable pour initEventSource.`); // Ïò§Î•òÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌïòÍ≥†
        return; // Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }

    const source = new EventSource(`/chat/stream/${groupName}/`); // Î∞±ÏóîÎìúÏùò `/chat/stream/` ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê ÏÉà EventSource Ïó∞Í≤∞ÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§. Ïù¥Î•º ÌÜµÌï¥ ÏÑúÎ≤ÑÏóêÏÑú Î∞úÏÉùÌïòÎäî Ïù¥Î≤§Ìä∏Î•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏàòÏã†Ìï† Ïàò ÏûàÏäµÎãàÎã§.
    eventSources[groupName] = source; // ÏÉùÏÑ±Îêú EventSource Í∞ùÏ≤¥Î•º `eventSources` Í∞ùÏ≤¥Ïóê Ï†ÄÏû•ÌïòÏó¨ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.

    source.onmessage = function (e) { // ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Î©îÏãúÏßÄ(Ïù¥Î≤§Ìä∏)Î•º ÏàòÏã†Ìï† ÎïåÎßàÎã§ Ìò∏Ï∂úÎêòÎäî Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ÏûÖÎãàÎã§.
        try {
            const messageData = JSON.parse(e.data); // ÏàòÏã†Îêú Ïù¥Î≤§Ìä∏ Îç∞Ïù¥ÌÑ∞(`e.data`)Î•º JSON Î¨∏ÏûêÏó¥Î°ú ÌååÏã±ÌïòÏó¨ Î©îÏãúÏßÄ Í∞ùÏ≤¥Î°ú Î≥ÄÌôòÌï©ÎãàÎã§.
            const msgElement = createMessageElement(messageData, groupName); // Î©îÏãúÏßÄ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ HTML Î©îÏãúÏßÄ ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
            chatLog.appendChild(msgElement); // ÏÉùÏÑ±Îêú Î©îÏãúÏßÄ ÏöîÏÜåÎ•º Ï±ÑÌåÖ Î°úÍ∑∏Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
            chatLog.scrollTop = chatLog.scrollHeight; // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú Ïù¥ÎèôÌïòÏó¨ ÏµúÏã† Î©îÏãúÏßÄÍ∞Ä Ìï≠ÏÉÅ Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
            // addNotificationDot(groupName); // NEW: (ÎØ∏Îûò Í∏∞Îä•) Ï±ÑÌåÖ Î≤ÑÎ∏îÏù¥ ÌòÑÏû¨ ÌëúÏãúÎêòÏßÄ ÏïäÎäî Í≤ΩÏö∞ ÏïåÎ¶º Ï†êÏùÑ Ï∂îÍ∞ÄÌïòÎäî Ï£ºÏÑù Ï≤òÎ¶¨Îêú Í∏∞Îä•ÏûÖÎãàÎã§.
        } catch (error) { // JSON ÌååÏã± ÎòêÎäî Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞
            console.error( // Ïò§Î•ò Î©îÏãúÏßÄÏôÄ ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Î•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                'Erreur de parsing JSON ou de traitement du message SSE:',
                error,
                e.data
            );
        }
    };

    source.onerror = function (err) { // EventSource Ïó∞Í≤∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏùÑ Îïå Ìò∏Ï∂úÎêòÎäî Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ÏûÖÎãàÎã§.
        console.error('EventSource failed:', err); // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
        // G√©rer les erreurs de connexion SSE (reconnexion, affichage message utilisateur, etc.)
        // SSE Ïó∞Í≤∞ Ïò§Î•òÎ•º Ï≤òÎ¶¨ÌïòÎäî Î°úÏßÅ(Ïòà: ÏùºÏ†ï ÏãúÍ∞Ñ ÌõÑ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ, ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú)ÏùÑ Ïó¨Í∏∞Ïóê Íµ¨ÌòÑÌï† Ïàò ÏûàÏäµÎãàÎã§.
    };
}

// Function to get CSRF token
// Ïø†ÌÇ§ÏóêÏÑú ÌäπÏ†ï Ïù¥Î¶ÑÏùò Í∞íÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ìï®ÏàòÏûÖÎãàÎã§. CSRF ÌÜ†ÌÅ∞ÏùÑ Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ï£ºÎ°ú ÏÇ¨Ïö©Îê©ÎãàÎã§.
function getCookie(name) {
    let cookieValue = null; // Ïø†ÌÇ§ Í∞íÏùÑ Ï†ÄÏû•Ìï† Î≥ÄÏàòÎ•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
    if (document.cookie && document.cookie !== '') { // `document.cookie`Í∞Ä Ï°¥Ïû¨ÌïòÍ≥† ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå Ïã§ÌñâÌï©ÎãàÎã§.
        const cookies = document.cookie.split(';'); // Î™®Îì† Ïø†ÌÇ§Î•º ÏÑ∏ÎØ∏ÏΩúÎ°†(;)ÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Î∞∞Ïó¥Î°ú ÎßåÎì≠ÎãàÎã§.
        for (let i = 0; i < cookies.length; i++) { // Í∞Å Ïø†ÌÇ§Î•º ÏàúÌöåÌï©ÎãàÎã§.
            const cookie = cookies[i].trim(); // Ïø†ÌÇ§ Î¨∏ÏûêÏó¥Ïùò ÏïûÎí§ Í≥µÎ∞±ÏùÑ Ï†úÍ±∞Ìï©ÎãàÎã§.
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === name + '=') { // ÌòÑÏû¨ Ïø†ÌÇ§Í∞Ä Ï∞æÍ≥† ÏûàÎäî Ïù¥Î¶ÑÏúºÎ°ú ÏãúÏûëÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§ (Ïòà: 'csrftoken=').
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1)); // Ïø†ÌÇ§ Ïù¥Î¶Ñ Î∂ÄÎ∂Ñ Îã§ÏùåÏùò Í∞íÏùÑ ÎîîÏΩîÎî©ÌïòÏó¨ Í∞ÄÏ†∏ÏòµÎãàÎã§.
                break; // Ïø†ÌÇ§Î•º Ï∞æÏïòÏúºÎØÄÎ°ú Î£®ÌîÑÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
            }
        }
    }
    return cookieValue; // Ï∞æÏùÄ Ïø†ÌÇ§ Í∞íÏùÑ Î∞òÌôòÌïòÍ±∞ÎÇò, Ï∞æÏßÄ Î™ªÌñàÏúºÎ©¥ `null`ÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
}

// Function to request creation/retrieval of a private group
// ÎåÄÏÉÅ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÍ≥º IDÎ•º Î∞õÏïÑ Í∞úÏù∏ Ï±ÑÌåÖ Í∑∏Î£πÏùÑ ÏÉùÏÑ±ÌïòÍ±∞ÎÇò Í∏∞Ï°¥ Í∑∏Î£πÏùÑ Í∞ÄÏ†∏Ïò§ÎèÑÎ°ù Î∞±ÏóîÎìúÏóê ÏöîÏ≤≠ÌïòÎäî ÎπÑÎèôÍ∏∞ Ìï®ÏàòÏûÖÎãàÎã§.
async function promptPrivateChat(targetUsername, targetUserId) {
    const currentUsernameInput = // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ Í∞ÄÏ†∏Ïò¨ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
        document.getElementById('usernameInput-general') || // Î®ºÏ†Ä ÏùºÎ∞ò Ï±ÑÌåÖÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º ÏãúÎèÑÌï©ÎãàÎã§.
        document.querySelector('.chat-bubble input[id^="usernameInput-"]'); // ÏóÜÏúºÎ©¥ ÌòÑÏû¨ Ïó¥Î†§ ÏûàÎäî Îã§Î•∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
    if (!currentUsernameInput || !currentUsernameInput.value) { // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÍ∞Ä ÏóÜÍ±∞ÎÇò Í∞íÏù¥ ÎπÑÏñ¥ ÏûàÏúºÎ©¥
        alert( // Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
            "Veuillez d'abord entrer votre nom d'utilisateur dans le chat g√©n√©ral."
        );
        return; // Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }
    const currentUsername = currentUsernameInput.value.trim(); // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùò ÏïûÎí§ Í≥µÎ∞±ÏùÑ Ï†úÍ±∞Ìï©ÎãàÎã§.

    if (currentUsername === targetUsername) { // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûêÍ∏∞ ÏûêÏã†Í≥º Í∞úÏù∏ Ï±ÑÌåÖÏùÑ ÏãúÏûëÌïòÎ†§Í≥† ÌïòÎ©¥
        alert('Vous ne pouvez pas d√©marrer un chat priv√© avec vous-m√™me.'); // Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
        return; // Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    }

    if (confirm(`Voulez-vous d√©marrer un chat priv√© avec ${targetUsername}?`)) { // ÏÇ¨Ïö©ÏûêÏóêÍ≤å `targetUsername`Í≥ºÏùò Í∞úÏù∏ Ï±ÑÌåÖ ÏãúÏûëÏùÑ ÌôïÏù∏Ìï†ÏßÄ Î¨ªÎäî ÎåÄÌôî ÏÉÅÏûêÎ•º ÌëúÏãúÌï©ÎãàÎã§.
        try {
            const response = await fetch('/chat/group/create/private', { // Î∞±ÏóîÎìúÏùò Í∞úÏù∏ Í∑∏Î£π ÏÉùÏÑ±/Í∞ÄÏ†∏Ïò§Í∏∞ APIÏóê POST ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉÖÎãàÎã§.
                method: 'POST', // HTTP POST Î©îÏÑúÎìú
                headers: { // ÏöîÏ≤≠ Ìó§Îçî
                    'Content-Type': 'application/x-www-form-urlencoded', // ÏöîÏ≤≠ Î≥∏Î¨∏Ïùò ÏΩòÌÖêÏ∏† Ïú†ÌòïÏù¥ URL Ïù∏ÏΩîÎî©Îêú Ìèº Îç∞Ïù¥ÌÑ∞ÏûÑÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.
                    'X-CSRFToken': getCookie('csrftoken'), // CSRF ÌÜ†ÌÅ∞ÏùÑ Ìè¨Ìï®Ìï©ÎãàÎã§.
                },
                body: new URLSearchParams({ // ÏöîÏ≤≠ Î≥∏Î¨∏ÏùÑ URL Ïù∏ÏΩîÎî©Îêú Ìèº Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏúºÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.
                    current_username: currentUsername, // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ
                    target_username: targetUsername, // ÎåÄÏÉÅ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ
                    // target_user_id: targetUserId // Î∞±ÏóîÎìúÏóêÏÑú ÏÇ¨Ïö©Ïûê IDÎ•º ÏÇ¨Ïö©ÌïòÎäî Í≤ΩÏö∞ Ïù¥ Ï§ÑÏùò Ï£ºÏÑùÏùÑ Ìï¥Ï†úÌï©ÎãàÎã§.
                }).toString(),
            });

            const data = await response.json(); // ÏùëÎãµÏùÑ JSON ÌòïÏãùÏúºÎ°ú ÌååÏã±Ìï©ÎãàÎã§.
            if (response.ok) { // HTTP ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 2xx(ÏÑ±Í≥µ)Ïù∏ Í≤ΩÏö∞
                if (data.status === 'success' && data.group_name) { // Î∞±ÏóîÎìú ÏùëÎãµÏù¥ ÏÑ±Í≥µÏ†ÅÏù¥Í≥† `group_name`ÏùÑ Ìè¨Ìï®ÌïòÎäî Í≤ΩÏö∞
                    createChatBubble(data.group_name, true); // Î∞òÌôòÎêú `group_name`ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÌëúÏãúÌï©ÎãàÎã§.
                } else { // Î∞±ÏóîÎìú ÏùëÎãµÏù¥ ÏÑ±Í≥µÏ†ÅÏù¥ÏßÄ ÏïäÍ±∞ÎÇò `group_name`Ïù¥ ÏóÜÎäî Í≤ΩÏö∞
                    console.error( // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                        'Erreur serveur lors de la cr√©ation du groupe priv√©:',
                        data.message
                    );
                    alert('Erreur lors de la cr√©ation du groupe priv√©: ' + data.message); // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
                }
            } else { // HTTP ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 2xxÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞
                console.error( // HTTP Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                    'Erreur HTTP lors de la cr√©ation du groupe priv√©:',
                    response.status,
                    data.error || response.statusText
                );
                alert('Erreur HTTP: ' + (data.error || response.statusText)); // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
            }
        } catch (error) { // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌïú Í≤ΩÏö∞
            console.error( // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
                'Erreur r√©seau lors de la cr√©ation du groupe priv√©:',
                error
            );
            alert( // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï©ÎãàÎã§.
                'Impossible de se connecter au serveur pour cr√©er le groupe priv√©.'
            );
        }
    }
}

// Function to update the position of private chat bubbles
// Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏùò ÏúÑÏπòÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§. Ïó¨Îü¨ Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏù¥ Ïó¥Î†§ ÏûàÏùÑ Îïå Í≤πÏπòÏßÄ ÏïäÍ≥† Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ï†ïÎ†¨ÎêòÎèÑÎ°ù Ìï©ÎãàÎã§.
function updateChatBubblePositions() {
    const activeBubbles = document.querySelectorAll( // ÌòÑÏû¨ `display: flex`Î°ú ÌëúÏãúÎêú(Ïó¥Î†§ ÏûàÎäî) Î™®Îì† Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ ÏÑ†ÌÉùÌï©ÎãàÎã§.
        '.chat-bubble[style*="display: flex"]'
    );
    let currentOffset = 0; // Ï¥àÍ∏∞ Ïò§ÌîÑÏÖãÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
    activeBubbles.forEach((bubble) => { // Í∞Å ÌôúÏÑ± Î≤ÑÎ∏îÏóê ÎåÄÌï¥
        if (bubble.classList.contains('private-chat')) { // ÌòÑÏû¨ Î≤ÑÎ∏îÏù¥ Í∞úÏù∏ Ï±ÑÌåÖ Î≤ÑÎ∏îÏù∏ Í≤ΩÏö∞ÏóêÎßå ÏúÑÏπòÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§.
            bubble.style.right = `${20 + currentOffset}px`; // Î≤ÑÎ∏îÏùò `right` CSS ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§. (Í∏∞Î≥∏ 20px ÎßàÏßÑ + ÌòÑÏû¨ÍπåÏßÄÏùò Ïò§ÌîÑÏÖã)
            currentOffset += bubble.offsetWidth + 20; // Îã§Ïùå Î≤ÑÎ∏îÏùÑ ÏúÑÌï¥ ÌòÑÏû¨ Î≤ÑÎ∏îÏùò ÎÑàÎπÑÏôÄ 20pxÏùò Ï∂îÍ∞Ä Í∞ÑÍ≤©(gap)ÏùÑ ÎçîÌïòÏó¨ Ïò§ÌîÑÏÖãÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
        }
    });
}

// This function should be called ONLY when the user logs in.
// Ïù¥ Ìï®ÏàòÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ÌñàÏùÑ ÎïåÎßå Ìò∏Ï∂úÎêòÏñ¥Ïïº Ìï©ÎãàÎã§. Ï±ÑÌåÖ Í∏∞Îä•ÏùÑ Ï¥àÍ∏∞ÌôîÌïòÍ≥† Í∏∞Î≥∏ ÏÉÅÌÉúÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
export function chatController() {
    // Ensure the main chat container exists
    // Ï£ºÏöî Ï±ÑÌåÖ Ïª®ÌÖåÏù¥ÎÑà(`#chat-container`)Í∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
    let chatContainerDiv = document.getElementById('chat-container'); // `#chat-container` ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
    if (!chatContainerDiv) { // ÏöîÏÜåÍ∞Ä ÏóÜÏúºÎ©¥
        // If not found, create it (e.g., if index.html doesn't define it explicitly)
        // Ï∞æÏùÑ Ïàò ÏóÜÏúºÎ©¥ (Ïòà: `index.html`Ïóê Î™ÖÏãúÏ†ÅÏúºÎ°ú Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞) ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.
        chatContainerDiv = document.createElement('div'); // ÏÉà `div` ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
        chatContainerDiv.id = 'chat-container'; // IDÎ•º 'chat-container'Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
        document.body.appendChild(chatContainerDiv); // `body` ÎòêÎäî ÌäπÏ†ï ÎûòÌçº ÏöîÏÜåÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    }

    // Ensure the chat buttons container exists
    // Ï±ÑÌåÖ Î≤ÑÌäº Ïª®ÌÖåÏù¥ÎÑà(`#chatButtonsContainer`)Í∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
    let chatButtonsContainer = document.getElementById('chatButtonsContainer'); // `#chatButtonsContainer` ÏöîÏÜåÎ•º Ï∞æÏäµÎãàÎã§.
    if (!chatButtonsContainer) { // ÏöîÏÜåÍ∞Ä ÏóÜÏúºÎ©¥
        chatButtonsContainer = document.createElement('div'); // ÏÉà `div` ÏöîÏÜåÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
        chatButtonsContainer.id = 'chatButtonsContainer'; // IDÎ•º 'chatButtonsContainer'Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
        chatContainerDiv.appendChild(chatButtonsContainer); // `chatContainerDiv` ÎÇ¥Î∂ÄÏóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    }

    // Create the general chat bubble. It will be created hidden by default now.
    // ÏùºÎ∞ò Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§. Ïù¥Ï†ú Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ïà®Í≤®ÏßÑ ÏÉÅÌÉúÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§.
    createChatBubble('general', false);

    // Initially hide all bubbles and show only the general chat button
    // Ï¥àÍ∏∞ÏóêÎäî Î™®Îì† Ï±ÑÌåÖ Î≤ÑÎ∏îÏùÑ Ïà®Í∏∞Í≥† ÏùºÎ∞ò Ï±ÑÌåÖ Î≤ÑÌäºÎßå ÌëúÏãúÌï©ÎãàÎã§.
    hideAllChatBubbles(); // Ïù¥Ï†Ñ ÏÑ∏ÏÖòÏù¥ÎÇò ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú Ïù∏Ìï¥ ÏÉùÏÑ±ÎêòÏóàÏùÑ Ïàò ÏûàÎäî Î™®Îì† Î≤ÑÎ∏îÏùÑ Ïà®ÍπÅÎãàÎã§.

    // Make sure the general chat button is visible initially
    // ÏùºÎ∞ò Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäºÏù¥ Ï¥àÍ∏∞ÏóêÎäî ÌôïÏã§Ìûà Î≥¥Ïù¥ÎèÑÎ°ù Ìï©ÎãàÎã§.
    const generalChatButton = document.getElementById('chatToggleButton-general'); // ÏùºÎ∞ò Ï±ÑÌåÖ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Ï∞æÏäµÎãàÎã§.
    if (generalChatButton) { // Î≤ÑÌäºÏù¥ Ï°¥Ïû¨ÌïòÎ©¥
        generalChatButton.style.display = 'flex'; // `display` ÏÜçÏÑ±ÏùÑ 'flex'Î°ú ÏÑ§Ï†ïÌïòÏó¨ ÏµúÏÜåÌôîÎêú ÏßÑÏûÖÏ†ê(Î≤ÑÌäº)ÏúºÎ°ú ÌëúÏãúÌï©ÎãàÎã§.
    } else { // Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏúºÎ©¥
        console.error("General chat toggle button not found after creation."); // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏΩòÏÜîÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
    }

    // Optional: Set a default username for the logged-in user
    // This should ideally be set based on actual user data after login
    // (ÏÑ†ÌÉù ÏÇ¨Ìï≠) Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§. Ïã§Ï†úÎ°úÎäî Î°úÍ∑∏Ïù∏ ÌõÑ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Ïóê Í∏∞Î∞òÌïòÏó¨ ÏÑ§Ï†ïÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
    const usernameInputGeneral = document.getElementById('usernameInput-general'); // ÏùºÎ∞ò Ï±ÑÌåÖÏùò ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìúÎ•º Ï∞æÏäµÎãàÎã§.
    if (usernameInputGeneral) { // ÏûÖÎ†• ÌïÑÎìúÍ∞Ä Ï°¥Ïû¨ÌïòÎ©¥
        usernameInputGeneral.value = "UserLoggedIn"; // ÏòàÏãú ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§. (Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏúºÎ°ú ÎåÄÏ≤¥Ìï¥Ïïº Ìï®)
    }
}

// DOMContentLoaded listener for initial setup (runs once DOM is ready)
// DOMContentLoaded Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà: DOM(Î¨∏ÏÑú Í∞ùÏ≤¥ Î™®Îç∏)Ïù¥ ÏôÑÏ†ÑÌûà Î°úÎìúÎêòÍ≥† ÌååÏã±Îêú ÌõÑ ÏΩîÎìúÎ•º Ïã§ÌñâÌï©ÎãàÎã§.
document.addEventListener('DOMContentLoaded', () => {
    // Attach event listener for 'Enter' key globally
    // Ï†ÑÏó≠Ï†ÅÏúºÎ°ú 'Enter' ÌÇ§ Ïù¥Î≤§Ìä∏Î•º ÏúÑÌïú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    document.addEventListener('keydown', function (event) { // ÌÇ§Î≥¥Îìú ÎàåÎ¶º Ïù¥Î≤§Ìä∏Î•º ÏàòÏã†Ìï©ÎãàÎã§.
        if (event.key === 'Enter') { // ÎàåÎ¶∞ ÌÇ§Í∞Ä 'Enter' ÌÇ§Ïù∏ Í≤ΩÏö∞
            const activeElement = document.activeElement; // ÌòÑÏû¨ ÏõπÌéòÏù¥ÏßÄÏóêÏÑú Ìè¨Ïª§Ïä§Îêú(ÌôúÏÑ±ÌôîÎêú) ÏöîÏÜåÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
            if (activeElement && activeElement.id.startsWith('messageInput-')) { // ÌôúÏÑ±ÌôîÎêú ÏöîÏÜåÍ∞Ä Î©îÏãúÏßÄ ÏûÖÎ†• ÌïÑÎìúÏù∏ Í≤ΩÏö∞ (IDÍ∞Ä 'messageInput-'ÏúºÎ°ú ÏãúÏûë)
                const groupName = activeElement.id.split('-')[1]; // Î©îÏãúÏßÄ ÏûÖÎ†• ÌïÑÎìúÏùò IDÏóêÏÑú Í∑∏Î£π Ïù¥Î¶Ñ Î∂ÄÎ∂ÑÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§ (Ïòà: 'messageInput-general'ÏóêÏÑú 'general').
                sendMessage(groupName); // Ìï¥Îãπ Í∑∏Î£π Ïù¥Î¶ÑÏúºÎ°ú `sendMessage` Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÏó¨ Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°Ìï©ÎãàÎã§.
                event.preventDefault(); // 'Enter' ÌÇ§Ïùò Í∏∞Î≥∏ ÎèôÏûë(Ïòà: Ìèº Ï†úÏ∂ú ÎòêÎäî ÏÉà Ï§Ñ Ï∂îÍ∞Ä)ÏùÑ Î∞©ÏßÄÌï©ÎãàÎã§.
            }
        }
    });

    // === DEMONSTRATION ONLY ===
    // This part is for demonstration purposes only.
    // In a real application, chatController() would be called ONLY after a successful user login.
    // For demonstration, we simulate a login by calling it on DOMContentLoaded.
    // Replace this with your actual login success callback.
    // === Îç∞Î™® Ï†ÑÏö© ===
    // Ïù¥ Î∂ÄÎ∂ÑÏùÄ Îç∞Î™®Î•º ÏúÑÌïú Í≤ÉÏûÖÎãàÎã§. Ïã§Ï†ú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóêÏÑúÎäî `chatController()` Ìï®ÏàòÍ∞Ä ÏÇ¨Ïö©ÏûêÏùò ÏÑ±Í≥µÏ†ÅÏù∏ Î°úÍ∑∏Ïù∏ Ïù¥ÌõÑÏóêÎßå Ìò∏Ï∂úÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
    // Îç∞Î™®Î•º ÏúÑÌï¥ DOMÏù¥ Î°úÎìúÎêú Ï¶âÏãú Ïù¥ Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÏó¨ Î°úÍ∑∏Ïù∏ÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï©ÎãàÎã§.
    // Ïã§Ï†ú Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÏΩúÎ∞±ÏúºÎ°ú Ïù¥ Î∂ÄÎ∂ÑÏùÑ ÍµêÏ≤¥Ìï¥Ïïº Ìï©ÎãàÎã§.
    chatController(); // `chatController` Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÏó¨ Ï±ÑÌåÖ Í∏∞Îä•ÏùÑ Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
});

import { routes } from '../routes.js';
import {
	actualizeIndexPage,
	getCookie,
	loadTemplate,
	closeModal,
} from '../utils.js';

const chatBubbles = {}; // Stores references to chat bubble elements by groupName
const eventSources = {}; // Stores EventSource objects by groupName
const messageOffsets = {}; // Stores the offset for message history for each group

// Helper to create an HTML message element
function createMessageElement(messageData, groupName) {
	const msg = document.createElement('div');
	msg.classList.add('chat-message');

	const usernameInput = document.getElementById(`usernameInput-${groupName}`);
	const currentUsername = usernameInput ? usernameInput.value : '';

	// Determines if it's their own message
	if (
		messageData.sender === currentUsername ||
		messageData.sender__username === currentUsername
	) {
		msg.classList.add('self');
	} else {
		msg.classList.add('other');
	}

	const senderSpan = document.createElement('span');
	senderSpan.classList.add('message-sender');
	senderSpan.textContent = messageData.sender__username || messageData.sender;

	const displayedSender = messageData.sender__username || messageData.sender;
	if (displayedSender && displayedSender !== currentUsername) {
		senderSpan.style.cursor = 'pointer';
		senderSpan.style.textDecoration = 'underline';
		senderSpan.onclick = () =>
			promptPrivateChat(displayedSender, messageData.sender_id || null);
	}
	msg.appendChild(senderSpan);

	const contentText = document.createTextNode(messageData.content);
	msg.appendChild(contentText);

	const timestampSpan = document.createElement('span');
	timestampSpan.classList.add('message-timestamp');
	timestampSpan.textContent = messageData.timestamp;
	msg.appendChild(timestampSpan);

	return msg;
}

// Load message history
async function loadMessageHistory(groupName, prepend = false) {
	const chatLog = document.getElementById(`chatLog-${groupName}`);
	if (!chatLog) {
		console.error(
			`chatLog-${groupName} introuvable pour charger l'historique.`
		);
		return;
	}

	const offset = messageOffsets[groupName] || 0;
	const limit = 20; // Number of messages to load each time

	try {
		const response = await fetch(
			`/chat/history/${groupName}/?offset=${offset}&limit=${limit}`
		);
		const data = await response.json();

		if (response.ok && data.status === 'success') {
			if (data.messages.length > 0) {
				const fragment = document.createDocumentFragment();
				data.messages.forEach((msgData) => {
					const msgElement = createMessageElement(msgData, groupName);
					if (prepend) {
						fragment.appendChild(msgElement);
					} else {
						chatLog.appendChild(msgElement);
					}
				});

				if (prepend) {
					const oldScrollHeight = chatLog.scrollHeight;
					chatLog.insertBefore(fragment, chatLog.firstChild);
					const newScrollHeight = chatLog.scrollHeight;
					chatLog.scrollTop = newScrollHeight - oldScrollHeight;
				} else {
					chatLog.appendChild(fragment);
					chatLog.scrollTop = chatLog.scrollHeight;
				}
				messageOffsets[groupName] = offset + data.messages.length;
			} else if (!prepend) {
				console.log(
					`Pas d'historique pour ${groupName} ou fin de l'historique.`
				);
			}
		} else {
			console.error(
				'Erreur de chargement historique:',
				data.message || 'Unknown error'
			);
		}
	} catch (error) {
		console.error("Erreur r√©seau lors du chargement de l'historique:", error);
	}
}

// Variable for private chat button colors
const privateChatButtonColors = [
	'color1',
	'color2',
	'color3',
	'color4',
	'color5',
];
const assignedPrivateChatColors = {}; // To track assigned colors

// Function to hide all chat bubbles and show their respective toggle buttons
function hideAllChatBubbles() {
	for (const groupName in chatBubbles) {
		const bubble = chatBubbles[groupName];
		bubble.style.display = 'none'; // Hide the bubble
		const button = document.getElementById(`chatToggleButton-${groupName}`);
		if (button) {
			button.style.display = 'flex'; // Show the toggle button
		}
	}
}

// Function to create and manage chat toggle buttons
function createChatToggleButton(groupName, isPrivate = false) {
	const buttonsContainer = document.getElementById('chatButtonsContainer');
	let button = document.getElementById(`chatToggleButton-${groupName}`);

	if (button) {
		return button;
	}

	button = document.createElement('button');
	button.classList.add('chat-toggle-button');
	button.id = `chatToggleButton-${groupName}`;
	button.textContent = 'üí¨'; // Default icon

	if (isPrivate) {
		button.classList.add('private');
		let colorClass = assignedPrivateChatColors[groupName];
		if (!colorClass) {
			const colorIndex =
				Object.keys(assignedPrivateChatColors).length %
				privateChatButtonColors.length;
			colorClass = privateChatButtonColors[colorIndex];
			assignedPrivateChatColors[groupName] = colorClass;
		}
		button.classList.add(colorClass);

		const participants = groupName.split('_').slice(1);
		if (participants.length >= 2) {
			const otherUser = participants[0];
			button.textContent = otherUser.charAt(0).toUpperCase();
		} else {
			button.textContent = 'üîí';
		}
	} else {
		// General chat, no change to default icon
	}

	button.onclick = () => {
		toggleChat(groupName, true); // Force display when button is clicked (from minimized state)
	};

	buttonsContainer.prepend(button);

	return button;
}

// Function to create a dynamic chat bubble
async function createChatBubble(groupName, isPrivate = false) {
	if (chatBubbles[groupName]) {
		// If bubble already exists, update its state via toggleChat
		toggleChat(groupName, true);
		const usernameInputGeneral = document.getElementById(
			'usernameInput-general'
		);
		const usernameInputCurrent = document.getElementById(
			`usernameInput-${groupName}`
		);
		if (
			usernameInputGeneral &&
			usernameInputCurrent &&
			!usernameInputCurrent.value
		) {
			usernameInputCurrent.value = usernameInputGeneral.value;
		}
		const chatLog = document.getElementById(`chatLog-${groupName}`);
		if (chatLog) {
			chatLog.scrollTop = chatLog.scrollHeight;
		}
		createChatToggleButton(groupName, isPrivate); // Ensure button is visible
		return;
	}

	const chatContainer = document.createElement('div');
	chatContainer.classList.add('chat-bubble');
	chatContainer.id = `chatBubble-${groupName}`;

	if (isPrivate) {
		chatContainer.classList.add('private-chat');
		const existingBubbles = document.querySelectorAll(
			'.chat-bubble[style*="display: flex"]'
		);
		const offset = existingBubbles.length * 370;
		chatContainer.style.right = `${20 + offset}px`;
	} else {
		chatContainer.classList.add('general-chat'); // Add class for general chat styling
	}

	// Generate the HTML content of the bubble with dynamic IDs
	chatContainer.innerHTML = `
        <div class="chat-header ${isPrivate ? 'private' : 'general'}">
            <h4>${
							isPrivate
								? `Chat Priv√© (${groupName.split('_').slice(1).join(' - ')})`
								: 'Chat G√©n√©ral'
						}</h4>
            <button class="close-btn" onclick="toggleChat('${groupName}')">&times;</button>
        </div>
        <div class="chat-body" id="chatLog-${groupName}">
        </div>
        <div class="chat-input">
            <input type="text" id="usernameInput-${groupName}" placeholder="Votre nom">
            <input type="hidden" id="groupNameInput-${groupName}" value="${groupName}">
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput-${groupName}" placeholder="√âcris un message">
            <button onclick="sendMessage('${groupName}')">Envoyer</button>
        </div>
    `;

	document.getElementById('chat-container').appendChild(chatContainer); // Append to #chat-container
	chatBubbles[groupName] = chatContainer;

	// Create the toggle button for this bubble (it will be initially visible if its bubble is hidden)
	createChatToggleButton(groupName, isPrivate);

	// Initial state: created but hidden. Will be shown via toggleChat later.
	chatContainer.style.display = 'none';

	// Copy username from general chat if available
	const usernameInputGeneral = document.getElementById('usernameInput-general');
	const usernameInputCurrent = document.getElementById(
		`usernameInput-${groupName}`
	);
	if (
		usernameInputGeneral &&
		usernameInputCurrent &&
		!usernameInputCurrent.value
	) {
		usernameInputCurrent.value = usernameInputGeneral.value;
	}

	// Load history and init SSE if the bubble is *initially* set to display (e.g. for general chat only)
	// Or delay this until the first time it is maximized. For now, keep it for functionality.
	await loadMessageHistory(groupName);
	initEventSource(groupName);

	const chatLog = document.getElementById(`chatLog-${groupName}`);
	if (chatLog) {
		chatLog.addEventListener('scroll', function () {
			if (chatLog.scrollTop === 0) {
				loadMessageHistory(groupName, true);
			}
		});
	}
}

// Function to show/hide a chat bubble
function toggleChat(groupName, forceDisplay = false) {
	const bubble = document.getElementById(`chatBubble-${groupName}`);
	if (!bubble) return;

	const button = document.getElementById(`chatToggleButton-${groupName}`);

	// Logic: if forceDisplay (e.g. from button click) OR currently hidden -> show it
	if (
		forceDisplay ||
		bubble.style.display === 'none' ||
		bubble.style.display === ''
	) {
		// Hide all other open bubbles first
		hideAllChatBubbles();

		bubble.style.display = 'flex'; // Show the current bubble
		if (button) {
			button.style.display = 'none'; // Hide its corresponding toggle button
		}

		const chatLog = document.getElementById(`chatLog-${groupName}`);
		if (chatLog) {
			chatLog.scrollTop = chatLog.scrollHeight; // Scroll to bottom
		}
		updateChatBubblePositions();
	} else {
		// Currently displayed, so minimize/hide it
		bubble.style.display = 'none'; // Hide the bubble
		if (button) {
			button.style.display = 'flex'; // Show its toggle button again
		}
		updateChatBubblePositions();
	}
}

// Function to send a message
async function sendMessage(groupName) {
	const usernameInput = document.getElementById(`usernameInput-${groupName}`);
	const messageInput = document.getElementById(`messageInput-${groupName}`);
	const groupNameInput = document.getElementById(`groupNameInput-${groupName}`);

	const username = usernameInput.value.trim();
	const content = messageInput.value.trim();
	const currentGroupName = groupNameInput.value;

	if (!username || !content) {
		alert('Veuillez entrer votre nom et un message.');
		return;
	}

	try {
		const response = await fetch('/chat/send/', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'X-CSRFToken': getCookie('csrftoken'),
			},
			body: JSON.stringify({
				username: username,
				content: content,
				group_name: currentGroupName,
			}),
		});

		const data = await response.json();
		if (response.ok) {
			if (data.status === 'success') {
				messageInput.value = '';
			} else {
				console.error("Erreur serveur lors de l'envoi:", data.message);
				alert("Erreur lors de l'envoi du message: " + data.message);
			}
		} else {
			console.error(
				"Erreur HTTP lors de l'envoi:",
				response.status,
				data.message || response.statusText
			);
			alert('Erreur HTTP: ' + (data.message || response.statusText));
		}
	} catch (error) {
		console.error('Erreur r√©seau ou JSON:', error);
		alert('Impossible de se connecter au serveur pour envoyer le message.');
	}
}

// Function to initialize EventSource (SSE) for a group
function initEventSource(groupName) {
	if (
		eventSources[groupName] &&
		eventSources[groupName].readyState === EventSource.OPEN
	) {
		return;
	}

	const chatLog = document.getElementById(`chatLog-${groupName}`);
	if (!chatLog) {
		console.error(`chatLog-${groupName} introuvable pour initEventSource.`);
		return;
	}

	const source = new EventSource(`/chat/stream/${groupName}/`);
	eventSources[groupName] = source;

	source.onmessage = function (e) {
		try {
			const messageData = JSON.parse(e.data);
			const msgElement = createMessageElement(messageData, groupName);
			chatLog.appendChild(msgElement);
			chatLog.scrollTop = chatLog.scrollHeight;
			// addNotificationDot(groupName); // NEW: (future feature) Add red dot if bubble not visible
		} catch (error) {
			console.error(
				'Erreur de parsing JSON ou de traitement du message SSE:',
				error,
				e.data
			);
		}
	};

	source.onerror = function (err) {
		console.error('EventSource failed:', err);
	};
}

// Function to get CSRF token
function getCookie(name) {
	let cookieValue = null;
	if (document.cookie && document.cookie !== '') {
		const cookies = document.cookie.split(';');
		for (let i = 0; i < cookies.length; i++) {
			const cookie = cookies[i].trim();
			if (cookie.substring(0, name.length + 1) === name + '=') {
				cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
				break;
			}
		}
	}
	return cookieValue;
}

// Function to request creation/retrieval of a private group
async function promptPrivateChat(targetUsername, targetUserId) {
	const currentUsernameInput =
		document.getElementById('usernameInput-general') ||
		document.querySelector('.chat-bubble input[id^="usernameInput-"]');
	if (!currentUsernameInput || !currentUsernameInput.value) {
		alert(
			"Veuillez d'abord entrer votre nom d'utilisateur dans le chat g√©n√©ral."
		);
		return;
	}
	const currentUsername = currentUsernameInput.value.trim();

	if (currentUsername === targetUsername) {
		alert('Vous ne pouvez pas d√©marrer un chat priv√© avec vous-m√™me.');
		return;
	}

	if (confirm(`Voulez-vous d√©marrer un chat priv√© avec ${targetUsername}?`)) {
		try {
			const response = await fetch('/chat/group/create/private', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'X-CSRFToken': getCookie('csrftoken'),
				},
				body: new URLSearchParams({
					current_username: currentUsername,
					target_username: targetUsername,
					// target_user_id: targetUserId // If you have the ID and backend uses it
				}).toString(),
			});

			const data = await response.json();
			if (response.ok) {
				if (data.status === 'success' && data.group_name) {
					createChatBubble(data.group_name, true); // Create private chat bubble
				} else {
					console.error(
						'Erreur serveur lors de la cr√©ation du groupe priv√©:',
						data.message
					);
					alert('Erreur lors de la cr√©ation du groupe priv√©: ' + data.message);
				}
			} else {
				console.error(
					'Erreur HTTP lors de la cr√©ation du groupe priv√©:',
					response.status,
					data.error || response.statusText
				);
				alert('Erreur HTTP: ' + (data.error || response.statusText));
			}
		} catch (error) {
			console.error(
				'Erreur r√©seau lors de la cr√©ation du groupe priv√©:',
				error
			);
			alert(
				'Impossible de se connecter au serveur pour cr√©er le groupe priv√©.'
			);
		}
	}
}

// Function to update the position of private chat bubbles
function updateChatBubblePositions() {
	const activeBubbles = document.querySelectorAll(
		'.chat-bubble[style*="display: flex"]'
	);
	let currentOffset = 0;
	activeBubbles.forEach((bubble) => {
		if (bubble.classList.contains('private-chat')) {
			bubble.style.right = `${20 + currentOffset}px`;
			currentOffset += bubble.offsetWidth + 20; // Bubble width + gap
		}
	});
}

// This function should be called ONLY when the user logs in.
export function chatController() {
	// Ensure the main chat container exists
	let chatContainerDiv = document.getElementById('chat-container');
	if (!chatContainerDiv) {
		// If not found, create it (e.g., if index.html doesn't define it explicitly)
		chatContainerDiv = document.createElement('div');
		chatContainerDiv.id = 'chat-container';
		document.body.appendChild(chatContainerDiv); // Append to body or a specific wrapper
	}

	// Ensure the chat buttons container exists
	let chatButtonsContainer = document.getElementById('chatButtonsContainer');
	if (!chatButtonsContainer) {
		chatButtonsContainer = document.createElement('div');
		chatButtonsContainer.id = 'chatButtonsContainer';
		chatContainerDiv.appendChild(chatButtonsContainer);
	}

	// Create the general chat bubble. It will be created hidden by default now.
	createChatBubble('general', false);

	// Initially hide all bubbles and show only the general chat button
	hideAllChatBubbles(); // Hide any bubbles that might have been created from previous sessions/reloads

	// Make sure the general chat button is visible initially
	const generalChatButton = document.getElementById('chatToggleButton-general');
	if (generalChatButton) {
		generalChatButton.style.display = 'flex'; // Show the general button as the minimized entry point
	} else {
		console.error('General chat toggle button not found after creation.');
	}

	// Optional: Set a default username for the logged-in user
	// This should ideally be set based on actual user data after login
	const usernameInputGeneral = document.getElementById('usernameInput-general');
	if (usernameInputGeneral) {
		usernameInputGeneral.value = 'UserLoggedIn'; // Example username
	}
}

// DOMContentLoaded listener for initial setup (runs once DOM is ready)
document.addEventListener('DOMContentLoaded', () => {
	// Attach event listener for 'Enter' key globally
	document.addEventListener('keydown', function (event) {
		if (event.key === 'Enter') {
			const activeElement = document.activeElement;
			if (activeElement && activeElement.id.startsWith('messageInput-')) {
				const groupName = activeElement.id.split('-')[1];
				sendMessage(groupName);
				event.preventDefault();
			}
		}
	});

	// === DEMONSTRATION ONLY ===
	// In a real application, chatController() would be called ONLY after a successful user login.
	// For demonstration, we simulate a login by calling it on DOMContentLoaded.
	// Replace this with your actual login success callback.
	chatController();
});
