"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
#### REQUIRED ELK LIBRARY ####
from .jsonSocketHandler import JSONSocketHandler
import dj_database_url
import logging
from logstash_async.formatter import LogstashFormatter
from logstash_async.handler import AsynchronousLogstashHandler

APP_NAME = 'live_chat'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BACKEND_DIR = BASE_DIR.parent
PROJECT_DIR = BACKEND_DIR.parent
FRONTEND_DIR = os.path.join(PROJECT_DIR, 'frontend/')
DOMAIN = os.getenv('DOMAIN', 'localhost')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [
    "https://transcendence.42.fr:8443",
    "https://localhost:8443",
]
# HTTP settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Application definition

INSTALLED_APPS = [
	'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'config.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],  # Use your Redis host and port
        },
    },
}

WSGI_APPLICATION = 'config.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ]
# }
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = FRONTEND_DIR
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import logging

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'simple': {
#             'format': '[{levelname}] {asctime} {name}: {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#             'level': 'DEBUG',  # Show all logs
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG',  # Show all logs
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Show all logs from Django
#             'propagate': False,
#         },
#         'api': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Show all logs from your app
#             'propagate': False,
#         },
#     },
# }

 # Logging configuration <-- To detach elk from django app, comment out 'AddAppNameFilter' and 'LOGGING'
# class AddAppNameFilter(logging.Filter):
#     def filter(self, record):
#         if not hasattr(record, 'app_name'):
#             record.app_name = APP_NAME
#         return True
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'add_app_name': {
#             '()': AddAppNameFilter,
#         },
#     },
#     'formatters': {
#         'text': {
#             'format': '%(asctime)s [%(levelname)s] [%(name)s] [%(app_name)s] %(message)s',
#             'class': 'logging.Formatter',
#         },
#         'logstash': {
#             '()': 'logstash_async.formatter.DjangoLogstashFormatter',
#         },
#     },
#     'handlers': {
#         'logstash': {
#             'level': 'DEBUG',
#             'class': 'logstash_async.handler.AsynchronousLogstashHandler',
#             'host': 'logstash',
#             'port': 6006,
#             'database_path': os.path.join(BASE_DIR, 'logstash.db'),
#             'ssl_enable': False,
#             'formatter': 'logstash',
#             'ensure_ascii': True,
#             'filters': ['add_app_name'],
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'text',
#             'filters': ['add_app_name'],
#         }
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'], # Only send Django logs to console by default
#             'level': 'DEBUG',
#             'propagate': False, # Prevent duplicate logging via root logger
#         },
#         'django.request': {
#             'handlers': ['console', 'logstash'], # Send Django request logs to Logstash
#             'level': 'DEBUG',
#             'propagate': True, # Prevent duplicate logging via root logger
#         },
#         'api': {
#             'handlers': ['console' ,'logstash'],
#             'level': 'DEBUG',
#             'propagate': True, # Prevent duplicate logging via root logger if needed
#         },
#     },
#     'root': {
#         'handlers': ['console', 'logstash'],
#         'level': 'DEBUG', # Set root logger to a higher level to avoid duplicates
#     },
# }