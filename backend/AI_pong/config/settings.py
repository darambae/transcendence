"""
Django settings for ai_pong project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
#### Required ELK library ####
from logstash_async.formatter import LogstashFormatter
from logstash_async.handler import AsynchronousLogstashHandler
from .jsonSocketHandler import JSONSocketHandler
import logging

APP_NAME = 'AI_pong'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BACKEND_DIR = BASE_DIR.parent
PROJECT_DIR = BACKEND_DIR.parent
FRONTEND_DIR = os.path.join(PROJECT_DIR, 'frontend/')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'api'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy'
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = FRONTEND_DIR
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# import logging

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'simple': {
#             'format': '[{levelname}] {asctime} {name}: {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#             'level': 'DEBUG',  # Show all logs
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG',  # Show all logs
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Show all logs from Django
#             'propagate': False,
#         },
#         'api': {
#             'handlers': ['console'],
#             'level': 'DEBUG',  # Show all logs from your app
#             'propagate': False,
#         },
#     },
# }

# Enhanced logging configuration for microservices
class AddAppNameFilter(logging.Filter):
    def filter(self, record):
        if not hasattr(record, 'app_name'):
            record.app_name = APP_NAME
        return True

class RequestContextFilter(logging.Filter):
    """Add request context to log records"""
    def filter(self, record):
        request = getattr(record, 'request', None)
        if request:
            record.user_id = getattr(request.user, 'id', 'anonymous') if hasattr(request, 'user') else 'unknown'
            record.user_name = getattr(request.user, 'user_name', 'anonymous') if hasattr(request, 'user') else 'unknown'
            record.request_id = getattr(request, 'META', {}).get('HTTP_X_REQUEST_ID', 'no-request-id')
            record.client_ip = self.get_client_ip(request)
            record.user_agent = request.META.get('HTTP_USER_AGENT', 'unknown')
            record.request_method = request.method
            record.request_path = request.path
            record.content_type = request.META.get('CONTENT_TYPE', 'unknown')
        else:
            record.user_id = 'system'
            record.user_name = 'system'
            record.request_id = 'system'
            record.client_ip = 'system'
            record.user_agent = 'system'
            record.request_method = 'system'
            record.request_path = 'system'
            record.content_type = 'system'
        return True
    
    def get_client_ip(self, request):
        """Get the real client IP address"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'add_app_name': {
            '()': AddAppNameFilter,
        },
        'request_context': {
            '()': RequestContextFilter,
        },
    },
    'formatters': {
        'text': {
            'format': '%(asctime)s [%(levelname)s] [%(app_name)s] [%(name)s] [User:%(user_name)s] [%(request_method)s %(request_path)s] %(message)s',
            'class': 'logging.Formatter',
        },
        'logstash': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s %(app_name)s %(user_name)s %(user_id)s %(request_method)s %(request_path)s %(client_ip)s %(user_agent)s %(request_id)s %(content_type)s',
            'rename_fields': {
                'asctime': 'timestamp',
                'name': 'logger',
                'levelname': 'level'
            },
            'static_fields': {
                'service_type': 'ai_pong',
                'environment': 'development'
            }
        },
    },
    'handlers': {
        'logstash': {
            'level': 'INFO',  # Changed from DEBUG to reduce noise
            'class': 'logstash_async.handler.AsynchronousLogstashHandler',
            'host': 'logstash',
            'port': 6006,
            'database_path': os.path.join(BASE_DIR, 'logstash.db'),
            'ssl_enable': False,
            'formatter': 'logstash',
            'ensure_ascii': True,
            'filters': ['add_app_name', 'request_context'],
        },
        'console': {
            'level': 'INFO',  # Changed from DEBUG to reduce noise
            'class': 'logging.StreamHandler',
            'formatter': 'text',
            'filters': ['add_app_name', 'request_context'],
        },
        'ai_handler': {
            'level': 'INFO',
            'class': 'logstash_async.handler.AsynchronousLogstashHandler',
            'host': 'logstash',
            'port': 6006,
            'database_path': os.path.join(BASE_DIR, 'logstash.db'),
            'ssl_enable': False,
            'formatter': 'logstash',
            'ensure_ascii': True,
            'filters': ['add_app_name', 'request_context'],
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',  # Reduced noise
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'logstash'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'logstash'],
            'level': 'WARNING',
            'propagate': False,
        },
        'api': {
            'handlers': ['console', 'ai_handler'],
            'level': 'INFO',
            'propagate': False,
        },
        'ai.game': {  # Custom logger for AI game logic
            'handlers': ['console', 'ai_handler'],
            'level': 'INFO',
            'propagate': False,
        },
        'ai.performance': {  # Custom logger for AI performance metrics
            'handlers': ['ai_handler'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',  # Only important messages at root level
    },
}

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
