services:
  postgres:
    image: postgres:latest
    #ports:
    #  - "5431:5431"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - .env
    networks:
      - shared_network

  user_service:
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    container_name: user_service
    #ports:
    #  - "8010:8010"
    volumes:
      - ./backend/user_service/user_management:/user_service
      - certs:/certs
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: always
    networks:
      - shared_network
      - nginx_network
  pong:
    build:
      context: ./backend/pong
      dockerfile: Dockerfile
    container_name: pong
    ports:
      - "8020:8020"
    volumes:
      - certs:/certs
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: always
    networks:
      - shared_network
      - nginx_network

  nginx_modsecurity:
    build: ./nginx_modsecurity
    container_name: nginx_modsecurity
    ports:
      - "8443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - certs:/etc/nginx/certs
      - ./nginx_modsecurity/log:/var/log/modsecurity:rw
    depends_on:
      - user_service
      - pong
    networks:
      - nginx_network
    env_file:
      - .env
    restart: always
  
  redis:
    image: redis:latest
    container_name: redis
    #ports:
    #  - "6379:6379"
    networks:
      - shared_network
    restart: always

volumes:
  postgres_data:
    name: postgres_data
    driver: local
  certs:
    external: true

networks:
  nginx_network:
    name: nginx_network
  shared_network:
    name: shared_network
    external: true
