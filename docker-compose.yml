services:
  certs_generator:
    container_name: certs_generator
    build:
      context: ./elk/setup
      dockerfile: Dockerfile
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    env_file:
      - .env
  
  ################## PostgreSQL ##################

  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - .env
    networks:
      - data_network

  ################## Nginx_modsecurity ##################
  nginx_modsecurity:
    build: ./nginx_modsecurity
    container_name: nginx_modsecurity
    ports:
      - "8443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - certs:/etc/nginx/certs
      - ./nginx_modsecurity/log:/var/log/modsecurity:rw
    depends_on:
      - user_service
      - ai_pong
      - server_pong
    networks:
      - nginx_network
    env_file:
      - .env
    restart: always

  ################## User_service ##################
  user_service:
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    container_name: user_service
    volumes:
      - ./backend/user_service:/app
      - certs:/certs
    depends_on:
      redis:
        condition: service_started
      certs_generator:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: always
    networks:
      - mail_network
      - elk_network
      - nginx_network

#################### Chat ####################
  live_chat:
    build:
      context: ./backend/live_chat
      dockerfile: Dockerfile
    container_name: live_chat
    volumes:
      - ./backend/live_chat:/app
      - certs:/certs
    depends_on:
      redis:
        condition: service_started
      certs_generator:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: always
    networks:
      - data_network
      - elk_network
      - nginx_network

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - nginx_network
    restart: always


  ################## Auth ##################

  auth:
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    container_name: auth
    volumes:
      - ./backend/auth:/app
      - certs:/certs
    depends_on:
      redis:
        condition: service_started
      certs_generator:
        condition: service_completed_successfully
    # environment:
    #   - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    env_file:
      - .env
    restart: always
    networks:
      - mail_network
      - elk_network
      - nginx_network
      - data_network

  ################## Access_posgresql ##################

  access_postgresql:
    build:
      context: ./backend/access_postgresql
      dockerfile: Dockerfile
    container_name: access_postgresql
    volumes:
      - ./backend/access_postgresql:/app
      - certs:/certs
    environment:
       - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
       - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    env_file:
      - .env
    depends_on:
      - postgres
    restart: always
    networks:
      - elk_network
      - nginx_network
      - data_network

  ################## mail ##################

  mail:
    build:
      context: ./backend/mail
      dockerfile: Dockerfile
    container_name: mail
    volumes:
      - ./backend/mail:/app
      - certs:/certs
    # environment:
    #   - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    #   - EMAIL_HOST_USER=${EMAIL_HOST_USER}
    #   - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    env_file:
      - .env
    restart: always
    networks:
      - mail_network
      - elk_network

  ############### Game import ##################
  server_pong:
    build: 
      context: ./backend/server_pong/
      dockerfile: ./Dockerfile
    container_name: server_pong
    depends_on:
      game_redis:
        condition: service_started
      certs_generator:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - certs:/certs
      - ./backend/server_pong:/app:rw
    networks:
      - game_network
      - nginx_network
      - elk_network
    restart: always

  ai_pong:
    build :
      context : ./backend/AI_pong/
      dockerfile: ./Dockerfile
    container_name : ai_pong
    depends_on:
      game_redis:
        condition: service_started
      certs_generator:
        condition: service_completed_successfully
    volumes:
      - certs:/certs
      - ./backend/AI_pong:/app
    env_file:
      - .env
    networks:
      - game_network
      - elk_network
      - nginx_network

  game_redis:
    container_name: game_redis
    image: "redis:latest"
    networks:
      - game_network

  tournament:
    build :
      context : ./backend/tournamentManager
      dockerfile : ./Dockerfile
    container_name : tournament_manager
    depends_on :
      certs_generator:
        condition: service_completed_successfully
    volumes:
      - certs:/certs
      - ./backend/tournamentManager:/app
    env_file: 
      - .env
    networks :
      - game_network
      - nginx_network
      - elk_network

  ################# ELK Stack ##################
  logstash:
    container_name: logstash
    build:
      context: ./elk/logstash
      dockerfile: Dockerfile 
    ports:
      - "9600:9600"
      - "5044:5044"
      - "6006:6006"
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - certs:/usr/share/logstash/config/certs
    depends_on:
      elasticsearch:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - elk_network
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:6000/_node/stats"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  elasticsearch:
    build:
      context: ./elk/elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    depends_on:
      certs_generator:
        condition: service_completed_successfully
    environment:

      - NODE_OPTIONS=--openssl-legacy-provider
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elk_data:/usr/share/elasticsearch/data
      - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    env_file:
      - .env
    networks:
      - elk_network
    healthcheck:
      test: ["CMD-SHELL", "curl -k -u logstash_system:${ELASTIC_PASSWORD} --silent --fail https://elasticsearch:9200/_cluster/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  kibana:
    build:
      context: ./elk/kibana
      dockerfile: Dockerfile
    container_name: kibana
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - NODE_OPTIONS=openssl-legacy-provider
      - ES_PATH_CONF=/usr/share/elasticsearch/config
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - elk_network
    volumes:
      - certs:/usr/share/kibana/config/certs
      - ./elk/kibana/my_kibana.yml:/usr/share/kibana/config/my_kibana.yml

#################### VOLUMES #########################
volumes:
  postgres_data:
    name: postgres_data
    driver: local
  elk_data:
    name: elk_data
    driver: local
  certs:
    name: certs
    driver: local

#################### NETWORKS #########################
networks:
  mail_network:
    name: mail_network
    driver: bridge
  data_network:
    name: data_network
    driver: bridge
  nginx_network:
    name: nginx_network
    driver: bridge
  elk_network:
    name: elk_network
    driver: bridge
  game_network:
    name: game_network
    driver: bridge
  # jwt_network:
  #   name: jwt_network
  #   driver: bridge
