services:
    postgres:
        image: postgres:latest
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        container_name: postgres
        labels:
            co.elastic.logs/module: "postgresql"
        # environment:
        #   POSTGRES_USER: ${POSTGRES_USER}
        #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        #   POSTGRES_DB: ${POSTGRES_DB}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 3
        env_file:
            - .env
        networks:
            - transcendence_network
      
    user_service:
        build:
            context: ./backend/user_service
            dockerfile: Dockerfile
        container_name: user_service
        labels:
            co.elastic.logs/module: "django"
        ports:
            - "8000:8000"
        depends_on:
            postgres:
                condition: service_healthy
        # environment:
        #   POSTGRES_USER: ${POSTGRES_USER}
        #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        #   POSTGRES_DB: ${POSTGRES_DB}
        #   POSTGRES_PORT: 5432
        #   POSTGRES_HOST: postgres
        #   DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
        #   DJANGO_SUPERUSER: ${DJANGO_SUPERUSER}
        #   DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
        #   DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
        env_file:
            - .env
        restart: always
        networks:
            - transcendence_network

    nginx:
        image: nginx:latest
        container_name: nginx
        labels:
            co.elastic.logs/module: "nginx"
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - user_service
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        restart: always
        logging:
            driver: "json-file"
        networks:
            - transcendence_network

    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: "0"
        container_name: setup
        command: >
            bash -c '
            if [ x${ELASTIC_PASSWORD} == x ]; then
            echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
            exit 1;
            elif [ x${KIBANA_PASSWORD} == x ]; then
            echo "Set the KIBANA_PASSWORD environment variable in the .env file";
            exit 1;
            fi;
            if [ ! -f config/certs/ca.zip ]; then
            echo "Creating CA";
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
            unzip config/certs/ca.zip -d config/certs;
            fi;
            if [ ! -f config/certs/certs.zip ]; then
            echo "Creating certs";
            echo -ne \
            "instances:\n"\
            "  - name: elasticsearch\n"\
            "    dns:\n"\
            "      - elasticsearch\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            "  - name: kibana\n"\
            "    dns:\n"\
            "      - kibana\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            "  - name: user_service\n"\
            "    dns:\n"\
            "      - user_service\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            "  - name: nginx\n"\
            "    dns:\n"\
            "      - nginx\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            > config/certs/instances.yml;
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
            unzip config/certs/certs.zip -d config/certs;
            fi;
            echo "Setting file permissions"
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 \{\} \;;
            find . -type f -exec chmod 640 \{\} \;;
            echo "Waiting for Elasticsearch availability";
            until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elsasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
            '
        healthcheck:
            test: ["CMD-SHELL", "[ -f config/certs/ ]"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
        
    logstash:
        image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
        container_name: logstash
        ports:
            - "5044:5044"
        volumes:
            - .elk/logstash/pipeline:/usr/share/logstash/pipeline
            - .elk/logstash/config:/usr/share/logstash/config
            - elk_data:/usr/share/logstash/data
            - elk_logs:/usr/share/logstash/logs
        depends_on:
            - postgres
            - elasticsearch
            - kibana
        env_file:
            - .env
        networks:
            - transcendence_network
    
    filebeat:
        image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
        container_name: filebeat
        volumes:
            - .elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - logstash
        env_file:
            - .env
        networks:
            - transcendence_network

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
        container_name: elasticsearch
        labels:
            co.elastic.logs/module: "elasticsearch"
        depends_on:
            setup:
                condition: service_healthy
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.verification_mode=certificate
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - elk_data:/usr/share/elasticsearch/data
        ports:
            - ${ELASTICSEARCH_PORT}:9200
        env_file:
            - .env
        networks:
            - transcendence_network

    kibana:
        image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
        container_name: kibana
        ports:
            - ${KIBANA_PORT}:5601
        
        depends_on:
            - elasticsearch
        env_file:
            - .env
        networks:
            - transcendence_network
    
volumes:
    postgres_data:
        driver: local
    elk_data:
        driver: local
    elk_logs:
        driver: local
    certs:
        driver: local

networks:
    transcendence_network:
        driver: bridge
       
        